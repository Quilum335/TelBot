from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

async def admin_users_sort_menu(callback: 'types.CallbackQuery'):
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üî§ –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="admin_users_sort_alpha"))
    kb.row(InlineKeyboardButton(text="‚è≥ –ü–æ —Å—Ä–æ–∫—É", callback_data="admin_users_sort_expiry"))
    kb.row(InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_users_sort_banned"))
    kb.row(InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ", callback_data="admin_users_select_mode"))
    kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users"))
    await callback.message.edit_text("‚öôÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=kb.as_markup())

# handlers.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤

from aiogram import types, F, Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    KeyboardButtonRequestChat, ChatAdministratorRights
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta, date
from pyrogram import Client
from pyrogram.errors import SessionPasswordNeeded, PhoneCodeInvalid, PhoneCodeExpired, ChannelsAdminPublicTooMuch
from pyrogram.types import ChatPrivileges
import aiosqlite
import asyncio
import json
import logging
import os
import random
import re
import string
from functools import partial
from glob import glob
from random import choices
from typing import Any, Optional

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import Config
from database import (
    create_user_database, get_user_db_path, check_subscription, 
    get_scheduled_posts, delete_scheduled_post, update_post_donor, 
    user_database_exists, safe_json_loads, ensure_user_database
)
from states import PostStates, AdminStates, ChannelStates, AccountStates, ScheduledPostsStates
from keyboards import (
    get_main_menu_keyboard, get_post_type_keyboard, get_auto_post_keyboard,
    get_channel_sort_keyboard, get_admin_menu_keyboard, get_license_duration_keyboard,
    get_license_duration_keyboard_with_username, create_calendar,
    get_channel_name_method_keyboard, get_auto_source_keyboard, get_periodic_source_keyboard,
    get_post_freshness_keyboard, get_scheduled_posts_keyboard, get_post_action_keyboard,
    get_confirm_delete_keyboard, get_channel_type_keyboard, get_channel_count_keyboard,
    get_donor_type_keyboard, get_manage_binding_keyboard, get_accounts_menu_keyboard,
    get_accounts_list_keyboard, get_accounts_for_channels_keyboard,
    get_manage_channels_for_account_keyboard, get_channels_list_keyboard, get_manage_posts_keyboard,
    get_donor_count_keyboard, get_periodic_donor_count_keyboard, get_donors_confirm_keyboard
)
from utils import clean_post_content
from schu import PostScheduler
from .pagination import (
    get_all_user_channels as _get_all_user_channels,
    display_channels_paginated as _display_channels_paginated,
    handle_channels_pagination as _handle_channels_pagination,
    display_scheduled_posts_paginated as _display_scheduled_posts_paginated,
    handle_scheduled_posts_pagination as _handle_scheduled_posts_pagination,
    fetch_all_users as _fetch_all_users,
    display_users_paginated as _display_users_paginated,
    handle_admin_users_pagination as _handle_admin_users_pagination,
    display_users_paginated_select as _display_users_paginated_select,
)
from .selection import (
    toggle_id_in_state_list as _toggle_id_in_state_list,
    fetch_user_channels as _fetch_user_channels,
    render_select_list as _render_select_list,
)
# –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
from auth_handler import link_account, process_phone, process_code, resend_code, process_password

logger = logging.getLogger(__name__)

# Safe-patch for Message.edit_text to ignore "message is not modified" errors
try:
    _orig_edit_text = types.Message.edit_text

    async def _safe_edit_text(self, *args, **kwargs):
        try:
            return await _orig_edit_text(self, *args, **kwargs)
        except TelegramBadRequest as e:
            try:
                msg = str(e)
            except Exception:
                msg = ''
            if 'message is not modified' in msg:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –∫–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ/markup –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                return None
            raise

    types.Message.edit_text = _safe_edit_text
except Exception:
    # –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º ‚Äî –Ω–µ –ª–æ–º–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    pass

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
active_clients: dict[int, Client] = {}

# --- Async TTL Cache (–∑–∞–º–µ–Ω–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è) ---
class AsyncTTLCache:
    def __init__(self, default_ttl: int = 300):
        self._data: dict[str, tuple[Any, float, int]] = {}
        self._default_ttl = default_ttl
        self._lock = asyncio.Lock()

    async def get(self, key: str) -> Optional[Any]:
        async with self._lock:
            if key not in self._data:
                return None
            value, ts, ttl = self._data[key]
            if (datetime.now().timestamp() - ts) < ttl:
                return value
            # expired
            del self._data[key]
            return None

    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        async with self._lock:
            self._data[key] = (value, datetime.now().timestamp(), ttl or self._default_ttl)

    async def delete_prefix(self, prefix: str) -> None:
        async with self._lock:
            to_delete = [k for k in self._data.keys() if k.startswith(prefix)]
            for k in to_delete:
                del self._data[k]

_cache = AsyncTTLCache()

# –ö—ç—à —É—Ç–∏–ª–∏—Ç—ã

def get_cache_key(user_id: int, key: str) -> str:
    return f"user_{user_id}_{key}"

async def get_cached_data(user_id: int, key: str, ttl: int = 300):
    cache_key = get_cache_key(user_id, key)
    data = await _cache.get(cache_key)
    return data

async def set_cached_data(user_id: int, key: str, data, ttl: int = 300):
    cache_key = get_cache_key(user_id, key)
    await _cache.set(cache_key, data, ttl)

async def clear_user_cache(user_id: int):
    await _cache.delete_prefix(f"user_{user_id}_")

# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
async def get_user_info(user_id: int, username: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cached = await get_cached_data(user_id, "user_info")
    if cached:
        return cached
    await create_user_database(user_id, username)
    db_path = await get_user_db_path(user_id, username)
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute(
            "SELECT subscription_end, is_banned FROM info WHERE telegram_user_id = ?",
            (user_id,)
        )
        result = await cursor.fetchone()
        if result:
            subscription_end = datetime.fromisoformat(result[0])
            is_banned = result[1]
            days_left = (subscription_end - datetime.now()).days
            trial_end = datetime.now() + timedelta(days=Config.TRIAL_DAYS)
            is_trial = subscription_end == trial_end
            user_info = {
                'has_subscription': days_left > 0 and not is_banned,
                'subscription_end': subscription_end,
                'days_left': days_left,
                'is_banned': is_banned,
                'is_trial': is_trial,
                'db_path': db_path
            }
            await set_cached_data(user_id, "user_info", user_info)
            return user_info
    return {
        'has_subscription': False,
        'subscription_end': None,
        'days_left': 0,
        'is_banned': False,
        'is_trial': False,
        'db_path': None
    }

async def check_user_access(user_id: int, username: str) -> tuple[bool, str]:
    user_info = await get_user_info(user_id, username)
    if user_info['is_banned']:
        return False, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    if not user_info['has_subscription']:
        return False, f"‚ùå –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞\nüí≥ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ {Config.ADMIN_USERNAME}"
    return True, ""

async def create_client_session(user_id: int, session_string: str) -> Client:
    if user_id in active_clients:
        try:
            await active_clients[user_id].disconnect()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram")
        finally:
            active_clients.pop(user_id, None)
    session_name = os.path.join(Config.SESSIONS_DIR, f"user_{user_id}")
    client = Client(
        session_name,
        api_id=Config.API_ID,
        api_hash=Config.API_HASH,
        session_string=session_string,
        in_memory=True
    )
    active_clients[user_id] = client
    return client

async def cleanup_inactive_clients():
    for user_id in list(active_clients.keys()):
        try:
            client = active_clients[user_id]
            if not client.is_connected:
                del active_clients[user_id]
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            active_clients.pop(user_id, None)

async def send_error_message(message_or_callback, error_text: str, back_callback: str = "back_to_menu"):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ])
    if hasattr(message_or_callback, 'message'):
        try:
            await message_or_callback.message.edit_text(error_text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                await message_or_callback.message.answer(error_text, reply_markup=keyboard)
            else:
                raise
    else:
        await message_or_callback.answer(error_text, reply_markup=keyboard)

async def send_success_message(message_or_callback, success_text: str, back_callback: str = "back_to_menu"):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data=back_callback)]
    ])
    if hasattr(message_or_callback, 'message'):
        try:
            await message_or_callback.message.edit_text(success_text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                await message_or_callback.message.answer(success_text, reply_markup=keyboard)
            else:
                raise
    else:
        await message_or_callback.answer(success_text, reply_markup=keyboard)

class ChannelCreateStates(StatesGroup):
    waiting_for_account = State()
    waiting_for_name_method = State()
    waiting_for_channel_name = State()
    waiting_for_generate_count = State()
    waiting_for_channel_type = State()
    waiting_for_channel_count = State()

class PostCreateStates(StatesGroup):
    waiting_for_account = State()
    waiting_for_channel = State()
    waiting_for_content = State()
    waiting_for_mode = State()
    waiting_for_auto_donor = State()
    waiting_for_auto_targets = State()
    waiting_for_auto_confirm = State()

class AccountDeleteStates(StatesGroup):
    waiting_for_account = State()
    waiting_for_confirm = State()

def register_handlers(dp, bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_menu, Command("menu"))
    dp.message.register(cmd_admin, Command("admin54"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
    dp.my_chat_member.register(on_bot_added_to_channel)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ request_chat
    dp.message.register(on_chat_shared, F.chat_shared)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    dp.callback_query.register(back_to_menu, F.data == "back_to_menu")
    dp.callback_query.register(buy_license, F.data == "buy_license")
    dp.callback_query.register(create_post, F.data == "create_post")
    dp.callback_query.register(list_channels, F.data == "list_channels")
    dp.callback_query.register(post_manual, F.data == "post_manual")
    dp.callback_query.register(post_auto, F.data == "post_auto")
    dp.callback_query.register(auto_source_linked, F.data == "auto_source_linked")
    dp.callback_query.register(auto_source_public, F.data == "auto_source_public")
    dp.callback_query.register(public_auto_once, F.data == "public_auto_once")
    dp.callback_query.register(public_auto_periodic, F.data == "public_auto_periodic")
    dp.callback_query.register(link_channel, F.data == "link_channel")
    dp.callback_query.register(lambda c: select_link_channel(c, bot), F.data.startswith("select_link_channel_"))
    dp.callback_query.register(partial(sort_channels, bot=bot), F.data.startswith("sort_"))
    dp.callback_query.register(select_channel, F.data.startswith("select_channel_"))
    dp.callback_query.register(channels_selected, F.data == "channels_selected")
    dp.callback_query.register(admin_licenses_list, F.data == "admin_licenses")
    # NOTE: do not register a generic handler for prefixes 'admin_license_'
    # because it would intercept more specific license callbacks (like admin_license_extend_{user_id}).
    dp.callback_query.register(admin_license_by_username, F.data == "admin_license_by_username")
    dp.callback_query.register(process_license_duration_unified, F.data.startswith("license_"), AdminStates.waiting_for_license_duration)
    dp.callback_query.register(admin_users_list, F.data == "admin_users")
    dp.callback_query.register(admin_user_action, F.data.startswith("admin_user_"))
    # Confirm and execute ban/unban flows
    dp.callback_query.register(admin_confirm_ban, F.data.startswith("admin_confirm_ban_"))
    dp.callback_query.register(admin_do_ban, F.data.startswith("admin_do_ban_"))
    dp.callback_query.register(admin_confirm_unban, F.data.startswith("admin_confirm_unban_"))
    dp.callback_query.register(admin_do_unban, F.data.startswith("admin_do_unban_"))
    # License extend flows
    dp.callback_query.register(admin_license_extend, F.data.startswith("admin_license_extend_"))
    dp.callback_query.register(admin_confirm_license, F.data.startswith("admin_confirm_license_"))
    dp.callback_query.register(admin_do_license, F.data.startswith("admin_do_license_"))
    dp.callback_query.register(back_to_admin_menu, F.data == "admin_menu")
    dp.callback_query.register(exit_admin, F.data == "exit_admin")
    dp.callback_query.register(resend_code_removed, F.data == "resend_code")
    dp.callback_query.register(manage_accounts_removed, F.data == "manage_accounts")
    dp.callback_query.register(unlink_account_removed, F.data.startswith("unlink_account_"))
    dp.callback_query.register(admin_link_main_account_removed, F.data == "admin_link_main_account")
    dp.callback_query.register(create_channel_start, F.data == "create_channel_start")
    dp.callback_query.register(create_channel_account, F.data.startswith("create_channel_account_"))
    dp.callback_query.register(create_channel_type, F.data.startswith("channel_type_"))
    dp.callback_query.register(create_channel_count, F.data.startswith("channel_count_"))
    dp.message.register(process_channel_count_custom, ChannelCreateStates.waiting_for_generate_count)
    dp.callback_query.register(create_channel_name_method, F.data.in_(["channel_name_manual", "channel_name_random"]))
    dp.message.register(create_channel_name_input, ChannelCreateStates.waiting_for_channel_name)
    dp.callback_query.register(check_bot_admin, F.data.startswith("check_bot_admin_"))
    dp.callback_query.register(create_post_from_account, F.data == "create_post_from_account")
    dp.callback_query.register(post_account_select, F.data.startswith("post_account_"))
    dp.callback_query.register(post_channel_select, F.data.startswith("post_channel_"))
    dp.message.register(post_content_send, PostCreateStates.waiting_for_content)
    dp.callback_query.register(periodic_donor_select, F.data.startswith("periodic_donor_"))
    dp.callback_query.register(post_from_account_manual, F.data == "post_from_account_manual")
    dp.callback_query.register(post_from_account_auto, F.data == "post_from_account_auto")
    dp.callback_query.register(autoacc_donor_select, F.data.startswith("autoacc_donor_"))
    dp.callback_query.register(autoacc_target_select, F.data.startswith("autoacc_target_"))
    dp.callback_query.register(autoacc_targets_selected, F.data == "autoacc_targets_selected")
    dp.callback_query.register(public_once_target_select, F.data.startswith("public_once_target_"))
    dp.callback_query.register(public_periodic_target_select, F.data.startswith("public_periodic_target_"))
    dp.callback_query.register(public_periodic_targets_selected, F.data == "public_periodic_targets_selected")
    dp.callback_query.register(auto_random, F.data == "auto_random")
    dp.callback_query.register(auto_periodic, F.data == "auto_periodic")
    dp.callback_query.register(periodic_source_linked, F.data == "periodic_source_linked")
    dp.callback_query.register(periodic_source_public, F.data == "periodic_source_public")
    dp.callback_query.register(donor_count_one, F.data == "donor_count_one")
    dp.callback_query.register(donor_count_many, F.data == "donor_count_many")
    dp.callback_query.register(periodic_count_one, F.data == "periodic_count_one")
    dp.callback_query.register(periodic_count_many, F.data == "periodic_count_many")
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    dp.callback_query.register(random_donor_select, F.data.startswith("random_donor_"))
    dp.callback_query.register(random_target_select, F.data.startswith("random_target_"))
    dp.callback_query.register(random_donors_selected, F.data == "random_donors_selected")
    dp.callback_query.register(random_targets_selected, F.data == "random_targets_selected")
    dp.message.register(process_random_interval, PostStates.waiting_for_random_interval)
    dp.message.register(process_random_posts_per_day, PostStates.waiting_for_random_posts_per_day)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(process_post_time, PostStates.waiting_for_time)
    dp.callback_query.register(process_calendar, F.data.startswith(("date_", "month_", "ignore")), PostStates.waiting_for_date)
    dp.message.register(partial(process_post_content, bot=bot), PostStates.waiting_for_content)
    dp.message.register(process_public_channel_input, PostStates.waiting_for_public_channel_input)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.callback_query.register(channel_generate_one, F.data == "channel_generate_one")
    dp.callback_query.register(channel_generate_many, F.data == "channel_generate_many")
    dp.message.register(process_generate_count, ChannelCreateStates.waiting_for_generate_count)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    dp.callback_query.register(public_random_target_select, F.data.startswith("public_random_target_"))
    dp.callback_query.register(public_random_targets_selected, F.data == "public_random_targets_selected")

    dp.callback_query.register(process_post_freshness, F.data.startswith("freshness_"), PostStates.waiting_for_post_freshness)
    dp.callback_query.register(process_random_freshness, F.data.startswith("freshness_"), PostStates.waiting_for_random_freshness)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
    dp.callback_query.register(scheduled_posts, F.data == "scheduled_posts")
    dp.callback_query.register(scheduled_posts_single, F.data == "scheduled_posts_single")
    dp.callback_query.register(scheduled_posts_streams, F.data == "scheduled_posts_streams")
    dp.callback_query.register(scheduled_posts_random, F.data == "scheduled_posts_random")
    dp.callback_query.register(show_random_post_details, F.data.startswith("show_random_post_details_"))
    dp.callback_query.register(post_action, F.data.startswith("post_action_"))
    dp.callback_query.register(delete_post, F.data.startswith("delete_post_"))
    dp.callback_query.register(confirm_delete, F.data.startswith("confirm_delete_"))

    dp.callback_query.register(change_donor, F.data.startswith("change_donor_"))
    dp.message.register(process_new_donor, ScheduledPostsStates.waiting_for_new_donor)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
    dp.callback_query.register(handle_channels_pagination, F.data.startswith("channels_page_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    dp.callback_query.register(handle_scheduled_posts_pagination, F.data.startswith("scheduled_posts_page_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ (–∫–Ω–æ–ø–∫–∏ "–≤—ã–±—Ä–∞—Ç—å –≤—Å–µ" –Ω–µ—Ç)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    dp.message.register(process_username_by_admin, AdminStates.waiting_for_username_by_admin)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
    dp.callback_query.register(post_type_text, F.data == "post_type_text")
    dp.callback_query.register(post_type_channel, F.data == "post_type_channel")
    dp.callback_query.register(select_source_channel, F.data.startswith("select_source_channel_"))
    dp.callback_query.register(select_target_channel, F.data.startswith("select_target_channel_"))
    dp.callback_query.register(target_channels_selected, F.data == "target_channels_selected")
    
    dp.callback_query.register(scheduled_posts_random, F.data == "scheduled_posts_random")
    dp.callback_query.register(post_action, F.data.startswith("post_action_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    dp.callback_query.register(confirm_create_periodic, F.data == "confirm_create_periodic", PostStates.waiting_for_confirm_periodic)
    dp.callback_query.register(confirm_create_random, F.data == "confirm_create_random", PostStates.waiting_for_confirm_random)
    dp.callback_query.register(confirm_create_single, F.data == "confirm_create_single")
    dp.callback_query.register(cancel_create_post, F.data == "cancel_create_post")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–π —Å username –≤ callback data
    # dp.callback_query.register(process_license_duration_unified, F.data.startswith("license_") & F.data.contains("_"), AdminStates.waiting_for_license_duration)

    # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –¢–ì–ö" —É–¥–∞–ª–µ–Ω–∞

    dp.callback_query.register(admin_users_management, F.data == "admin_users_management")
    dp.callback_query.register(admin_users_sorted_list, F.data.startswith("admin_users_sort_"))
    dp.callback_query.register(admin_users_sort_menu, F.data == "admin_users_sort_menu")
    dp.callback_query.register(handle_admin_users_pagination, F.data.startswith("admin_users_page_"))
    dp.callback_query.register(admin_users_select_mode, F.data == "admin_users_select_mode")
    dp.callback_query.register(admin_users_sel_toggle, F.data.startswith("admin_user_toggle_"))
    dp.callback_query.register(admin_users_sel_page, F.data.startswith("admin_users_sel_page_"))
    dp.callback_query.register(admin_users_apply_ban_selected, F.data == "admin_users_apply_ban_selected")
    dp.callback_query.register(admin_users_apply_unban_selected, F.data == "admin_users_apply_unban_selected")
    dp.callback_query.register(admin_bulk_license, F.data.startswith("admin_bulk_license_"))
    dp.callback_query.register(admin_user_action, F.data.startswith("admin_user_"))
    dp.callback_query.register(admin_quick_license, F.data.startswith("admin_license_quick_"))
    dp.message.register(process_admin_password, AdminStates.waiting_for_password)

    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–Ω–æ—Ä–∞
    dp.callback_query.register(donor_type_linked, F.data == "donor_type_linked")
    dp.callback_query.register(donor_type_public, F.data == "donor_type_public")
    # –í–≤–æ–¥ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–º
    dp.message.register(process_public_random_donors, PostStates.waiting_for_random_donors)

    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
    dp.callback_query.register(channel_names_auto, F.data == "channel_names_auto")
    dp.callback_query.register(channel_names_manual, F.data == "channel_names_manual")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ—Ç–æ–∫–æ–≤
    dp.callback_query.register(show_stream_details, F.data.startswith("show_stream_details_"))
    
    # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    # dp.callback_query.register(scheduled_posts_random, F.data == "scheduled_posts_random")
    # dp.callback_query.register(post_action, F.data.startswith("post_action_"))

    # –î–µ—Ç–∞–ª–∫–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    dp.callback_query.register(show_post_details, F.data.startswith("show_post_details_"))

    dp.callback_query.register(paginate_random_times, F.data.startswith("random_times_page_"))

    dp.callback_query.register(manage_binding_menu, F.data == "manage_binding")
    # –£–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    dp.callback_query.register(manage_accounts_menu, F.data == "manage_accounts_menu")
    dp.callback_query.register(accounts_list, F.data == "accounts_list")
    dp.callback_query.register(unlink_account, F.data.startswith("unlink_account_"))
    dp.callback_query.register(link_account, F.data == "link_account")
    dp.message.register(process_phone, AccountStates.waiting_for_phone)
    dp.message.register(process_code, AccountStates.waiting_for_code)
    dp.message.register(process_password, AccountStates.waiting_for_password)
    # –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏
    dp.callback_query.register(manage_channels_menu, F.data == "manage_channels_menu")
    dp.callback_query.register(manage_channels_for_account, F.data.startswith("manage_channels_for_"))
    dp.callback_query.register(create_channels_for_account, F.data.startswith("create_channels_for_"))
    dp.callback_query.register(delete_channels_for_account, F.data.startswith("delete_channels_for_"))
    dp.callback_query.register(delete_channel_for_account, F.data.startswith("delete_channel_"))
    # –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–º–∏
    dp.callback_query.register(manage_posts_menu, F.data == "manage_posts_menu")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
async def on_bot_added_to_channel(update: types.ChatMemberUpdated):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
    if update.chat.type == "channel" and update.new_chat_member.status in ["administrator", "creator"]:
        user_id = update.from_user.id
        username = update.from_user.username or str(user_id)
        channel_id = update.chat.id
        channel_title = update.chat.title
        channel_username = update.chat.username or ""
        
        db_path = await get_user_db_path(user_id, username)
        
        try:
            async with aiosqlite.connect(db_path) as db:
                cursor = await db.execute(
                    "SELECT id FROM channels WHERE channel_id = ?",
                    (channel_id,)
                )
                existing = await cursor.fetchone()
                
                if not existing:
                    await db.execute('''
                        INSERT INTO channels (channel_id, channel_username, channel_title)
                        VALUES (?, ?, ?)
                    ''', (channel_id, channel_username, channel_title))
                    await db.commit()
                    
                    await update.bot.send_message(
                        user_id,
                        f"‚úÖ –ö–∞–Ω–∞–ª '{channel_title}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
                            [InlineKeyboardButton(text="üì± –í –º–µ–Ω—é", callback_data="back_to_menu")]
                        ])
                    )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

async def on_chat_shared(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ Telegram (request_chat)."""
    if not getattr(message, 'chat_shared', None):
        return
    channel_id = message.chat_shared.chat_id
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    # Ensure DB initialized
    await ensure_user_database(user_id, username)
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Bot API
    channel_username = ''
    channel_title = ''
    try:
        chat = await message.bot.get_chat(channel_id)
        channel_title = chat.title or ''
        if getattr(chat, 'username', None):
            channel_username = chat.username
    except Exception:
        pass
    # Ensure DB initialized before accessing tables
    await ensure_user_database(user_id, username)
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute("SELECT id FROM channels WHERE channel_id = ?", (channel_id,))
        row = await cursor.fetchone()
        if not row:
            await db.execute(
                "INSERT INTO channels (channel_id, channel_username, channel_title) VALUES (?, ?, ?)",
                (channel_id, channel_username, channel_title)
            )
        else:
            await db.execute(
                "UPDATE channels SET channel_username = COALESCE(NULLIF(?, ''), channel_username), channel_title = COALESCE(NULLIF(?, ''), channel_title) WHERE channel_id = ?",
                (channel_username, channel_title, channel_id)
            )
        await db.commit()
    await message.answer("‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ 'üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_access, error_message = await check_user_access(user_id, username)
    if not has_access:
        await message.answer(error_message)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
    user_info = await get_user_info(user_id, username)
    
    welcome_text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Post Bot!\n\n"
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–ø–æ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
    )
    
    if user_info['days_left'] > 0:
        welcome_text += f"‚úÖ –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {user_info['days_left']} –¥–Ω–µ–π"
    else:
        welcome_text += "‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞"
    
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard(user_info))

async def cmd_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu"""
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_access, error_message = await check_user_access(user_id, username)
    if not has_access:
        await message.answer(error_message)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
    user_info = await get_user_info(user_id, username)
    
    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard(user_info)
    )

# (—É–¥–∞–ª–µ–Ω–æ) –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

async def cmd_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin54"""
    user_id = message.from_user.id
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ ADMIN_IDS, —á—Ç–æ–±—ã –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
    await state.set_state(AdminStates.waiting_for_password)
    await send_success_message(message, "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", back_callback="back_to_menu")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
async def back_to_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_access, error_message = await check_user_access(user_id, username)
    if not has_access:
        await send_error_message(callback, error_message)
        return
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
    user_info = await get_user_info(user_id, username)
    try:
        await callback.message.edit_text(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard(user_info)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            await callback.message.answer(
                "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu_keyboard(user_info)
            )
        else:
            raise

async def buy_license(callback: types.CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    await send_success_message(callback, "üí≥ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CEKYHDA\n\n", back_callback="back_to_menu")

async def create_post(callback: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    
    if not await check_subscription(user_id, username):
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞! –ö—É–ø–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            show_alert=True
        )
        await send_error_message(callback, f"üí≥ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é —É {Config.ADMIN_USERNAME}", back_callback="back_to_menu")
        return
    
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:",
        reply_markup=get_post_type_keyboard()
    )

async def list_channels(callback: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:",
        reply_markup=get_channel_sort_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
async def post_manual(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    await callback.message.edit_text(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:32):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )
    await state.set_state(PostStates.waiting_for_time)

async def process_post_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞"""
    try:
        time_parts = message.text.strip().split(":")
        if len(time_parts) != 2:
            raise ValueError
        hour = int(time_parts[0])
        minute = int(time_parts[1])
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
        await state.update_data(post_time=message.text, post_hour=hour, post_minute=minute)
        now = datetime.now()
        await message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=create_calendar(now.year, now.month)
        )
        await state.set_state(PostStates.waiting_for_date)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")

async def process_calendar(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    await callback.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
    data = callback.data.split("_")
    if data[0] == "ignore":
        await callback.answer()
        return
    elif data[0] == "month":
        year = int(data[1])
        month = int(data[2])
        await callback.message.edit_reply_markup(
            reply_markup=create_calendar(year, month)
        )
    elif data[0] == "date":
        try:
            date_str = data[1]  # —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD
            year, month, day = map(int, date_str.split("-"))
        except (IndexError, ValueError):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã", show_alert=True)
            return
        state_data = await state.get_data()
        post_hour = state_data.get("post_hour", 0)
        post_minute = state_data.get("post_minute", 0)
        now = datetime.now()
        selected_date = date(year, month, day)
        today = now.date()
        if selected_date < today:
            await callback.answer(
                "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!",
                show_alert=True
            )
            return
        if selected_date == today:
            selected_time = datetime(year, month, day, post_hour, post_minute)
            if selected_time <= now:
                await callback.answer(
                    "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è!",
                    show_alert=True
                )
                return
        await state.update_data(post_date=f"{year}-{month:02d}-{day:02d}")
        data_state = await state.get_data()
        post_time = data_state.get("post_time", "00:00")
        post_date = data_state.get("post_date", f"{year}-{month:02d}-{day:02d}")
        full_datetime = f"{post_date} {post_time}"
        if data_state.get("is_repost"):
            user_id = callback.from_user.id
            username = callback.from_user.username or str(user_id)
            db_path = await get_user_db_path(user_id, username)
            async with aiosqlite.connect(db_path) as db:
                cursor = await db.execute("SELECT channel_id, channel_title FROM channels")
                channels = await cursor.fetchall()
            if not channels:
                await send_error_message(callback, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", back_callback="back_to_menu")
                await state.clear()
                return
            await _render_select_list(
                callback,
                items=channels,
                selected_ids=[],
                build_callback_prefix="select_channel",
                title_text="üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                done_callback="channels_selected",
                back_callback="create_post",
            )
            await state.set_state(PostStates.waiting_for_channel)
            await state.update_data(selected_channels=[])
            return
        if data_state.get("is_periodic"):
            donor_channel = data_state.get("donor_channel")
            selected_channels = data_state.get("selected_channels", [])
            await callback.message.edit_text(
                f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ–∂–µ—Å—Ç—å –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n\n"
                f"üì§ –î–æ–Ω–æ—Ä: {donor_channel}\n"
                f"üì• –ö–∞–Ω–∞–ª—ã: {', '.join(str(cid) for cid in selected_channels)}\n\n"
                f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–µ–ø–æ—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–≤–µ–∂–µ—Å—Ç–∏\n"
                f"‚Ä¢ –°—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                reply_markup=get_post_freshness_keyboard()
            )
            await state.set_state(PostStates.waiting_for_post_freshness)
            return
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞", callback_data="post_type_text"),
            InlineKeyboardButton(text="üì§ –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞", callback_data="post_type_channel")
        )
        keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="create_post"))
        await callback.message.edit_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(PostStates.waiting_for_content)

async def process_post_content(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post_type = data.get("post_type", "text")
    
    if post_type == "text":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
        content_type = "text"
        content = ""
        media_id = None
        
        if message.text:
            content_type = "text"
            content = message.text
        elif message.photo:
            content_type = "photo"
            content = message.caption or ""
            media_id = message.photo[-1].file_id
        elif message.video:
            content_type = "video"
            content = message.caption or ""
            media_id = message.video.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
        await state.update_data(
            content_type=content_type,
            content=content,
            media_id=media_id
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        user_id = message.from_user.id
        username = message.from_user.username or str(user_id)
        db_path = await get_user_db_path(user_id, username)
        
        async with aiosqlite.connect(db_path) as db:
            cursor = await db.execute("SELECT channel_id, channel_title FROM channels")
            channels = await cursor.fetchall()
        
        if not channels:
            await send_error_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", back_callback="back_to_menu")
            await state.clear()
            return
        
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
        await _render_select_list(
            message,
            items=channels,
            selected_ids=[],
            build_callback_prefix="select_target_channel",
            title_text="üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            done_callback="target_channels_selected",
            back_callback="create_post",
        )
        await state.set_state(PostStates.waiting_for_channel)
        await state.update_data(selected_channels=[])
        
    elif post_type == "channel":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞ (—á–∏—Å–ª–æ)")
            return
        
        try:
            post_id = int(message.text)
        except ValueError:
            await message.answer("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞
        await state.update_data(source_post_id=post_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        user_id = message.from_user.id
        username = message.from_user.username or str(user_id)
        db_path = await get_user_db_path(user_id, username)
        
        async with aiosqlite.connect(db_path) as db:
            cursor = await db.execute("SELECT channel_id, channel_title FROM channels")
            channels = await cursor.fetchall()
        
        if not channels:
            await send_error_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", back_callback="back_to_menu")
            await state.clear()
            return
        
        source_channel_title = data.get("source_channel_title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
        await _render_select_list(
            message,
            items=channels,
            selected_ids=[],
            build_callback_prefix="select_target_channel",
            title_text=(
                f"üì§ –†–µ–ø–æ—Å—Ç –ø–æ—Å—Ç–∞ #{post_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {source_channel_title}\n\n"
                f"üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
            ),
            done_callback="target_channels_selected",
            back_callback="create_post",
        )
        await state.set_state(PostStates.waiting_for_channel)
        await state.update_data(selected_channels=[])

async def process_public_channel_input(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–µ–º –≤–≤–æ–¥–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    channel = (message.text or "").strip()
    if not channel:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
        return
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username/—Å—Å—ã–ª–∫—É
    if channel.startswith("http"):
        try:
            username = channel.split("/")[-1]
            # –û—Ç—Ä–µ–∂–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∏–ø–∞ ?start=... –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
            username = username.split("?")[0].split("#")[0]
            if not username.startswith("@"):
                channel = f"@{username}"
            else:
                channel = username
        except Exception:
            pass
    elif not channel.startswith("@") and not channel.lstrip("-").isdigit():
        channel = f"@{channel}"
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ @ –∏ –ª–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
    if "@" in channel[1:]:
        channel = "@" + channel.split("@")[-1]
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ username
    m = re.search(r"@([A-Za-z0-9_]{3,})", channel)
    if m:
        channel = f"@{m.group(1)}"
 
    await state.update_data(public_channel=channel)

    data = await state.get_data()
    if data.get("periodic_flow") == "public":
        # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–æ–Ω–æ—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        user_id = message.from_user.id
        username = message.from_user.username or str(user_id)
        channels = await _fetch_user_channels(user_id, username)
        if not channels:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –≤ –º–µ–Ω—é.")
            await state.clear()
            return
        await _render_select_list(
            message,
            items=channels,
            selected_ids=[],
            build_callback_prefix="public_periodic_target",
            title_text=(
                "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
                f"üì° –î–æ–Ω–æ—Ä: {channel}"
            ),
            done_callback="public_periodic_targets_selected",
            back_callback="auto_periodic",
        )
        await state.set_state(PostStates.waiting_for_auto_targets)
        await state.update_data(selected_targets=[])
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —à–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞ ‚Äî –≤–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é
        user_id = message.from_user.id
        username = message.from_user.username or str(user_id)
        user_info = await get_user_info(user_id, username)
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ", reply_markup=get_main_menu_keyboard(user_info))
        await state.clear()

async def post_type_text(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(post_type="text")
    await callback.message.edit_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é")
    await state.set_state(PostStates.waiting_for_content)

async def post_type_channel(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(post_type="channel")
    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞ (—á–∏—Å–ª–æ) –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    await state.set_state(PostStates.waiting_for_content)

async def select_target_channel(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    try:
        parts = callback.data.split("_")
        if parts[-1] == 'all':
            return await select_all_channels_toggle(callback, state)
        channel_id = int(parts[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return
    selected_ids, _ = await _toggle_id_in_state_list(state, 'selected_channels', channel_id)
    channels = await _fetch_user_channels(user_id, username)
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=selected_ids,
        build_callback_prefix="select_target_channel",
        title_text="üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        done_callback="target_channels_selected",
        back_callback="create_post",
    )

async def target_channels_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_channels: list[int] = data.get('selected_channels', []) or []
    if not selected_channels:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª", show_alert=True)
        return
    # Build scheduled datetime
    post_time: str = data.get('post_time')  # HH:MM
    post_date: str = data.get('post_date')  # YYYY-MM-DD
    if not post_time or not post_date:
        await send_error_message(callback, "–ù–µ –∑–∞–¥–∞–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", back_callback="create_post")
        return
    try:
        scheduled_dt = datetime.fromisoformat(f"{post_date} {post_time}")
    except Exception:
        await send_error_message(callback, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è", back_callback="create_post")
        return
    # Use ISO format so string comparisons with datetime.now().isoformat() are correct
    scheduled_str = scheduled_dt.isoformat()
    # Collect content
    content_type = data.get('content_type') or ('repost' if data.get('post_type') == 'channel' else 'text')
    content = data.get('content', '') or ''
    media_id = data.get('media_id')
    # For repost from channel, compose content as marker: repost_{source_channel_id}_{source_post_id}
    if content_type == 'repost':
        source_channel_id = data.get('source_channel_id')
        source_post_id = data.get('source_post_id')
        if not source_channel_id or not source_post_id:
            await send_error_message(callback, "–î–ª—è —Ä–µ–ø–æ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª –∏ ID –ø–æ—Å—Ç–∞", back_callback="create_post")
            return
        content = f"repost_{int(source_channel_id)}_{int(source_post_id)}"
        media_id = None
    # Insert posts for each selected channel
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    async with aiosqlite.connect(db_path) as db:
        for channel_id in selected_channels:
            await db.execute(
                """
                INSERT INTO posts (
                    channel_id, channel_username, content_type, content, media_id, scheduled_time,
                    is_periodic, period_hours, is_published, last_post_time
                ) VALUES (?, ?, ?, ?, ?, ?, 0, NULL, 0, NULL)
                """,
                (
                    channel_id,
                    '',
                    content_type,
                    content,
                    media_id,
                    scheduled_str
                )
            )
        await db.commit()
    await state.clear()
    await send_success_message(callback, "‚úÖ –ü–æ—Å—Ç(—ã) –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã", back_callback="scheduled_posts")

async def channel_names_auto(callback: types.CallbackQuery, state: FSMContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤"""
    data = await state.get_data()
    channel_count = data.get("channel_count", 1)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    if channel_count == 1:
        names = ["TG_" + ''.join(choices(string.ascii_uppercase + string.digits, k=8))]
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        names = []
        for i in range(channel_count):
            name = "TG_" + ''.join(choices(string.ascii_uppercase + string.digits, k=8))
            names.append(name)
    
    await state.update_data(channel_names=names, channel_create_pending=True)
    
    # –ï—Å–ª–∏ —Ç–∏–ø —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª—ã, –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø
    data = await state.get_data()
    if data.get("channel_type"):
        # –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Å callback –∏–ª–∏ message
        target = callback.message if hasattr(callback, 'message') else callback
        await create_channel_do(target, state)
    else:
        if hasattr(callback, 'message'):
            await callback.message.edit_text(
                f"–ù–∞–∑–≤–∞–Ω–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {channel_count}. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–æ–≤:",
                reply_markup=get_channel_type_keyboard()
            )
        else:
            await callback.answer(
                f"–ù–∞–∑–≤–∞–Ω–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {channel_count}. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–æ–≤:"
            )

async def channel_names_manual(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤"""
    data = await state.get_data()
    channel_count = data.get("channel_count", 1)
    
    if channel_count == 1:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:")
    else:
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è {channel_count} –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–Ω–∞–ª 1, –ö–∞–Ω–∞–ª 2, –ö–∞–Ω–∞–ª 3"
        )
    
    await state.set_state(ChannelCreateStates.waiting_for_channel_name)

async def show_stream_details(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Ç–æ–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤"""
    stream_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute('''
            SELECT donor_channel, target_channels, last_message_id, phone_number, is_public_channel, post_freshness
            FROM repost_streams
            WHERE id = ?
        ''', (stream_id,))
        stream = await cursor.fetchone()
        
        if not stream:
            await callback.answer("‚ùå –ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        donor_channel, target_channels, last_message_id, phone_number, is_public_channel, post_freshness = stream
        
        # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        if target_channels and target_channels.startswith('['):
            target_channels_list = safe_json_loads(target_channels, [])
        else:
            target_channels_list = [int(cid.strip()) for cid in target_channels.split(',') if cid.strip()] if target_channels else []
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        target_names = []
        for target_id in target_channels_list:
            cursor = await db.execute("SELECT channel_title FROM channels WHERE channel_id = ?", (target_id,))
            result = await cursor.fetchone()
            target_names.append(result[0] if result else str(target_id))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç–æ–∫–µ
        text = f"üîÑ –î–µ—Ç–∞–ª–∏ –ø–æ—Ç–æ–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤ #{stream_id}\n\n"
        text += f"üì° –î–æ–Ω–æ—Ä: {donor_channel}\n"
        text += f"üìä –¶–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã ({len(target_names)}):\n"
        
        for i, name in enumerate(target_names, 1):
            text += f"  {i}. {name}\n"
        
        text += f"üåê –¢–∏–ø –¥–æ–Ω–æ—Ä–∞: {'–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª' if is_public_channel else '–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª'}\n"

        
        if last_message_id:
            text += f"üìù –ü–æ—Å: {last_message_id}\n"
        
        from keyboards import get_post_action_keyboard
        await callback.message.edit_text(
            text,
            reply_markup=get_post_action_keyboard(stream_id, 'repost_stream')
        )

async def admin_users_management(callback: types.CallbackQuery):
    # Simplified admin management menu (kept for compatibility)
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users"))
    kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    await callback.message.edit_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=kb.as_markup())

async def admin_users_list(callback: types.CallbackQuery):
    users = await _fetch_all_users()
    # reuse pagination helper; default items_per_page set to 10 per request
    await _display_users_paginated(callback, users, page=0, items_per_page=10, sort_type='alpha')

async def admin_users_sorted_list(callback: types.CallbackQuery):
    sort_type = callback.data.split("_")[-1]
    users = await _fetch_all_users()
    await _display_users_paginated(callback, users, page=0, items_per_page=5, sort_type=sort_type)

async def admin_users_select_mode(callback: types.CallbackQuery, state: FSMContext):
    users = await _fetch_all_users()
    await state.update_data(admin_selected_users=[])
    await _display_users_paginated_select(callback, users, page=0, items_per_page=5, sort_type='alpha', selected_ids=[])

async def admin_users_sel_page(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    page = int(parts[3])
    sort_type = parts[4] if len(parts) > 4 else 'alpha'
    users = await _fetch_all_users()
    data = await state.get_data()
    selected = data.get('admin_selected_users', [])
    await _display_users_paginated_select(callback, users, page=page, items_per_page=5, sort_type=sort_type, selected_ids=selected)

async def admin_users_sel_toggle(callback: types.CallbackQuery, state: FSMContext):
    # admin_user_toggle_{user_id}_{page}_{sort}
    parts = callback.data.split("_")
    user_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 0
    sort_type = parts[5] if len(parts) > 5 else 'alpha'
    data = await state.get_data()
    selected: list[int] = data.get('admin_selected_users', [])
    if user_id in selected:
        selected.remove(user_id)
    else:
        selected.append(user_id)
    await state.update_data(admin_selected_users=selected)
    users = await _fetch_all_users()
    await _display_users_paginated_select(callback, users, page=page, items_per_page=5, sort_type=sort_type, selected_ids=selected)

async def admin_users_apply_ban_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected: list[int] = data.get('admin_selected_users', [])
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return
    users = await _fetch_all_users()
    for u in users:
        if u['user_id'] in selected:
            async with aiosqlite.connect(u['db_path']) as db:
                await db.execute("UPDATE info SET is_banned = 1 WHERE telegram_user_id = ?", (u['user_id'],))
                await db.commit()
    await send_success_message(callback, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã", back_callback="admin_users")
    await state.update_data(admin_selected_users=[])

async def admin_users_apply_unban_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected: list[int] = data.get('admin_selected_users', [])
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return
    users = await _fetch_all_users()
    for u in users:
        if u['user_id'] in selected:
            async with aiosqlite.connect(u['db_path']) as db:
                await db.execute("UPDATE info SET is_banned = 0 WHERE telegram_user_id = ?", (u['user_id'],))
                await db.commit()
    await send_success_message(callback, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã", back_callback="admin_users")
    await state.update_data(admin_selected_users=[])

async def admin_bulk_license(callback: types.CallbackQuery, state: FSMContext):
    # admin_bulk_license_{7d|30d|forever|delete}
    action = callback.data.split("_")[-1]
    data_state = await state.get_data()
    selected: list[int] = data_state.get('admin_selected_users', [])
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return
    duration_map = {'7d': 7, '30d': 30}
    now = datetime.now()
    users = await _fetch_all_users()
    for u in users:
        if u['user_id'] not in selected:
            continue
        if action == 'forever':
            new_end = datetime(2100, 1, 1)
        elif action == 'delete':
            new_end = now
        else:
            days = duration_map.get(action)
            if not days:
                continue
            new_end = now + timedelta(days=days)
        async with aiosqlite.connect(u['db_path']) as db:
            await db.execute("UPDATE info SET subscription_end = ? WHERE telegram_user_id = ?", (new_end.isoformat(), u['user_id']))
            await db.commit()
    await send_success_message(callback, "‚úÖ –õ–∏—Ü–µ–Ω–∑–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", back_callback="admin_users")
    await state.update_data(admin_selected_users=[])
 
# --- –õ–∏—Ü–µ–Ω–∑–∏–∏: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def admin_licenses_list(callback: types.CallbackQuery):
    # Deprecated: direct license management via standalone menu is removed.
    # Prefer using per-user "–ü—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é" flow from the users list.
    await callback.message.edit_text("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏:\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é' –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]]))

async def admin_license_by_username(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_username_by_admin)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

async def process_username_by_admin(message: types.Message, state: FSMContext):
    username = (message.text or "").strip().lstrip("@")
    if not username:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username")
        return
    from keyboards import get_license_duration_keyboard_with_username
    await state.set_state(AdminStates.waiting_for_license_duration)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è @{username}:",
        reply_markup=get_license_duration_keyboard_with_username(username)
    )

async def admin_license_action(callback: types.CallbackQuery):
    # –†–∞–Ω–µ–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –∑–∞–≥–ª—É—à–∫–æ–π. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏.
    await admin_licenses_list(callback)

async def process_license_duration_unified(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å username –≤ callback data."""
    try:
        parts = callback.data.split("_")  # e.g., license_30d_username
        if len(parts) < 2:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return
        action = parts[1]
        username = parts[2] if len(parts) > 2 else None

        # datetime, timedelta, aiosqlite, os, Config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞

        if not username:
            await callback.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è username", show_alert=True)
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        username = username.lstrip('@')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        now = datetime.now()
        if action == 'delete':
            new_end = now
        elif action == 'forever':
            new_end = datetime(2100, 1, 1)
        else:
            suffix_to_days = {
                '1d': 1,
                '7d': 7,
                '14d': 14,
                '30d': 30,
                '365d': 365,
            }
            days = suffix_to_days.get(action)
            if not days:
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", show_alert=True)
                return
            new_end = now + timedelta(days=days)

        # –ò—â–µ–º –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
        updated = False
        if os.path.exists(Config.DB_DIR):
            for filename in os.listdir(Config.DB_DIR):
                if not filename.endswith('.db'):
                    continue
                db_path = os.path.join(Config.DB_DIR, filename)
                try:
                    async with aiosqlite.connect(db_path) as db:
                        cursor = await db.execute(
                            "SELECT telegram_user_id FROM info WHERE telegram_username = ? LIMIT 1",
                            (username,)
                        )
                        row = await cursor.fetchone()
                        if not row:
                            continue
                        await db.execute(
                            "UPDATE info SET subscription_end = ? WHERE telegram_username = ?",
                            (new_end.isoformat(), username)
                        )
                        await db.commit()
                        updated = True
                        break
                except Exception:
                    continue

        if updated:
            await send_success_message(callback, "‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", back_callback="admin_licenses")
        else:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    finally:
        await state.clear()

# --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
async def back_to_admin_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_menu_keyboard())

async def exit_admin(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await send_success_message(callback, "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", back_callback="back_to_menu")

async def admin_user_action(callback: types.CallbackQuery):
    # admin_user_{user_id}_{page}_{sort}
    parts = callback.data.split("_")
    try:
        user_id = int(parts[2])
        page = int(parts[3]) if len(parts) > 3 else 0
        sort_type = parts[4] if len(parts) > 4 else 'alpha'
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    # Show current ban status and license actions
    # Fetch user's current ban status
    is_banned = False
    try:
        users = await _fetch_all_users()
        for u in users:
            if u['user_id'] == user_id:
                is_banned = bool(u.get('is_banned', False))
                break
    except Exception:
        pass

    kb = InlineKeyboardBuilder()
    if is_banned:
        kb.row(InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"admin_confirm_unban_{user_id}"))
    else:
        kb.row(InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"admin_confirm_ban_{user_id}"))
    kb.row(InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data=f"admin_license_extend_{user_id}"))
    kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_users_page_{page}_{sort_type}"))
    await callback.message.edit_text(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}", reply_markup=kb.as_markup())

async def admin_toggle_ban(callback: types.CallbackQuery):
    """Toggle ban/unban for a user across all DBs"""
    try:
        user_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    # Deprecated: replaced by explicit confirm/do handlers
    await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ë–∞–Ω/–†–∞–∑–±–∞–Ω –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –º–µ–Ω—é", show_alert=True)

async def admin_license_extend(callback: types.CallbackQuery):
    """Show license extend options for a user"""
    try:
        user_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="+1 –¥–µ–Ω—å", callback_data=f"admin_confirm_license_1d_{user_id}"),
        InlineKeyboardButton(text="+7 –¥–Ω–µ–π", callback_data=f"admin_confirm_license_7d_{user_id}")
    )
    kb.row(
        InlineKeyboardButton(text="+1 –º–µ—Å—è—Ü", callback_data=f"admin_confirm_license_30d_{user_id}"),
        InlineKeyboardButton(text="+1 –≥–æ–¥", callback_data=f"admin_confirm_license_365d_{user_id}")
    )
    kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_users_page_0_alpha"))
    await callback.message.edit_text("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é:", reply_markup=kb.as_markup())

async def admin_quick_license(callback: types.CallbackQuery):
    # admin_license_quick_{dur}_{user_id}
    parts = callback.data.split("_")
    try:
        dur = parts[3]
        user_id = int(parts[4])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    suffix_to_days = {
        '1d': 1,
        '2d': 2,
        '7d': 7,
        '14d': 14,
        '30d': 30,
        '365d': 365,
    }
    from datetime import datetime, timedelta
    days = suffix_to_days.get(dur)
    if not days:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", show_alert=True)
        return
    new_end = datetime.now() + timedelta(days=days)
    # Ask for confirmation before applying
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_do_license_{dur}_{user_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_users_page_0_alpha")
    )
    await callback.message.edit_text(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", reply_markup=kb.as_markup())


async def admin_confirm_ban(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–∞–Ω", callback_data=f"admin_do_ban_{user_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_user_{user_id}_0_alpha")
    )
    await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?", reply_markup=kb.as_markup())


async def admin_do_ban(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    updated = False
    try:
        import os
        import aiosqlite
        if os.path.exists(Config.DB_DIR):
            for filename in os.listdir(Config.DB_DIR):
                if not filename.endswith('.db'):
                    continue
                db_path = os.path.join(Config.DB_DIR, filename)
                async with aiosqlite.connect(db_path) as db:
                    await db.execute("UPDATE info SET is_banned = 1 WHERE telegram_user_id = ?", (user_id,))
                    await db.commit()
                    updated = True
    except Exception:
        updated = False
    if updated:
        await send_success_message(callback, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω", back_callback="admin_users")
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


async def admin_confirm_unban(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–±–∞–Ω", callback_data=f"admin_do_unban_{user_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_user_{user_id}_0_alpha")
    )
    await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?", reply_markup=kb.as_markup())


async def admin_do_unban(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    updated = False
    try:
        import os
        import aiosqlite
        if os.path.exists(Config.DB_DIR):
            for filename in os.listdir(Config.DB_DIR):
                if not filename.endswith('.db'):
                    continue
                db_path = os.path.join(Config.DB_DIR, filename)
                async with aiosqlite.connect(db_path) as db:
                    await db.execute("UPDATE info SET is_banned = 0 WHERE telegram_user_id = ?", (user_id,))
                    await db.commit()
                    updated = True
    except Exception:
        updated = False
    if updated:
        await send_success_message(callback, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω", back_callback="admin_users")
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


async def admin_confirm_license(callback: types.CallbackQuery):
    # callback: admin_confirm_license_{dur}_{user_id}
    parts = callback.data.split("_")
    try:
        dur = parts[3]
        user_id = int(parts[4])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    # ask confirmation
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_do_license_{dur}_{user_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_license_extend_{user_id}")
    )
    await callback.message.edit_text(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ ({dur}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", reply_markup=kb.as_markup())


async def admin_do_license(callback: types.CallbackQuery):
    # callback: admin_do_license_{dur}_{user_id}
    parts = callback.data.split("_")
    try:
        dur = parts[3]
        user_id = int(parts[4])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    suffix_to_days = {
        '1d': 1,
        '7d': 7,
        '30d': 30,
        '365d': 365,
    }
    days = suffix_to_days.get(dur)
    if not days:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", show_alert=True)
        return
    now = datetime.now()
    updated = False
    try:
        import os
        import aiosqlite
        if os.path.exists(Config.DB_DIR):
            for filename in os.listdir(Config.DB_DIR):
                if not filename.endswith('.db'):
                    continue
                db_path = os.path.join(Config.DB_DIR, filename)
                async with aiosqlite.connect(db_path) as db:
                    cursor = await db.execute("SELECT subscription_end FROM info WHERE telegram_user_id = ? LIMIT 1", (user_id,))
                    row = await cursor.fetchone()
                    if not row:
                        continue
                    cur_end = None
                    try:
                        if row[0]:
                            cur_end = datetime.fromisoformat(row[0])
                    except Exception:
                        cur_end = None
                    base = cur_end if cur_end and cur_end > now else now
                    new_end = base + timedelta(days=days)
                    await db.execute("UPDATE info SET subscription_end = ? WHERE telegram_user_id = ?", (new_end.isoformat(), user_id))
                    await db.commit()
                    updated = True
    except Exception:
        updated = False
    if updated:
        await send_success_message(callback, "‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", back_callback="admin_users")
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# --- –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ) ---
async def not_implemented(callback_or_message, *args, **kwargs):
    text = "‚õîÔ∏è –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    try:
        if hasattr(callback_or_message, 'message'):
            await callback_or_message.message.answer(text)
        elif hasattr(callback_or_message, 'answer'):
            await callback_or_message.answer(text)
    except Exception:
        pass

def _ensure_handler_names(names: list[str]):
    g = globals()
    for name in names:
        if name not in g:
            g[name] = not_implemented

_ensure_handler_names([
    # –∞–≤—Ç–æ/–∏—Å—Ç–æ—á–Ω–∏–∫–∏/–ø—É–±–ª–∏—á–Ω—ã–µ
    'post_auto','auto_source_linked','auto_source_public','public_auto_once','public_auto_periodic',
    # –∞–∫–∫–∞—É–Ω—Ç—ã/–∫–∞–Ω–∞–ª—ã/—Å–æ–∑–¥–∞–Ω–∏–µ
    'select_link_channel','sort_channels','manage_accounts','unlink_account',
    'admin_link_main_account','create_channel_start','create_channel_account','create_channel_type',
    'create_channel_count','process_channel_count_custom','create_channel_name_method','create_channel_name_input',
    'check_bot_admin','create_post_from_account','delete_account_menu','post_account_select','post_channel_select',
    'post_content_send','delete_account_confirm','delete_account_do','periodic_donor_select','post_from_account_manual',
    'post_from_account_auto','autoacc_donor_select','autoacc_target_select','autoacc_targets_selected',
    'public_once_target_select','public_periodic_target_select','public_periodic_targets_selected',
    # —Ä–∞–Ω–¥–æ–º/–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ
    'auto_random','auto_periodic','periodic_source_linked','periodic_source_public','random_donor_select',
    'random_target_select','random_donors_selected','random_targets_selected','process_random_interval',
    'process_random_posts_per_day','process_post_freshness','process_random_freshness',
    # –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ/–¥–µ–π—Å—Ç–≤–∏—è
    'post_action',
    'delete_post','confirm_delete','change_donor','process_new_donor','handle_channels_pagination',
    'handle_scheduled_posts_pagination','select_source_channel','select_target_channel','target_channels_selected',
    'show_random_post_details','confirm_create_periodic','confirm_create_random','confirm_create_single',
    'cancel_create_post','process_admin_password','donor_type_linked','donor_type_public',
    # –∞–¥–º–∏–Ω/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    'admin_users_select_mode','admin_users_sel_toggle','admin_users_sel_page','admin_users_apply_ban_selected',
    'admin_users_apply_unban_selected',
    # –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –≤—ã–±–æ—Ä—ã
    'public_random_target_select','public_random_targets_selected',
    # –Ω–æ–≤—ã–µ/–ø—Ä–æ—á–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
    'channel_generate_one','channel_generate_many','process_generate_count',
    'admin_user_action','admin_ban_user','admin_unban_user','back_to_admin_menu','exit_admin',
    'process_public_channel_input',
])

# --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤/–ø–æ—Å—Ç–æ–≤ (select_channel / channels_selected) ---
async def select_channel(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    try:
        parts = callback.data.split("_")
        if parts[-1] == "all":
            return await select_all_channels_toggle(callback, state)
        channel_id = int(parts[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return
    selected_ids, _ = await _toggle_id_in_state_list(state, 'selected_channels', channel_id)
    channels = await _fetch_user_channels(user_id, username)
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=selected_ids,
        build_callback_prefix="select_channel",
        title_text="üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        done_callback="channels_selected",
        back_callback="create_post",
    )

async def channels_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get('selected_channels', []) or []
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª", show_alert=True)
        return
    await send_success_message(callback, "‚úÖ –ö–∞–Ω–∞–ª—ã –≤—ã–±—Ä–∞–Ω—ã", back_callback="create_post")

async def select_all_channels_toggle(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    channels = await _fetch_user_channels(user_id, username)
    all_ids = [cid for cid, _ in channels]
    await state.update_data(selected_channels=all_ids)
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=all_ids,
        build_callback_prefix="select_channel",
        title_text="üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        done_callback="channels_selected",
        back_callback="create_post",
    )

# --- –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ pagination.py ---
async def handle_channels_pagination(callback: types.CallbackQuery):
    await _handle_channels_pagination(callback)

async def handle_scheduled_posts_pagination(callback: types.CallbackQuery):
    await _handle_scheduled_posts_pagination(callback)

async def handle_admin_users_pagination(callback: types.CallbackQuery):
    await _handle_admin_users_pagination(callback)

# ----------------- Implementations for previously undefined handlers -----------------

# Auto posting menu and sources
async def post_auto(callback: types.CallbackQuery):
    await callback.message.edit_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º:", reply_markup=get_auto_post_keyboard())

async def auto_source_linked(callback: types.CallbackQuery):
    await callback.message.edit_text("üîó –ò—Å—Ç–æ—á–Ω–∏–∫: –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. –î–∞–ª—å–Ω–µ–π—à–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_auto")]]))

async def auto_source_public(callback: types.CallbackQuery):
    await callback.message.edit_text("üåê –ò—Å—Ç–æ—á–Ω–∏–∫: –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. –î–∞–ª—å–Ω–µ–π—à–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_auto")]]))

async def public_auto_once(callback: types.CallbackQuery):
    await callback.message.edit_text("üóì –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_auto")]]))

async def public_auto_periodic(callback: types.CallbackQuery):
    await callback.message.edit_text("üîÅ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_auto")]]))

# Channel linking and sorting
async def link_channel(callback: types.CallbackQuery):
    text = (
        "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    req = KeyboardButtonRequestChat(
        request_id=1,
        chat_is_channel=True,
        bot_administrator_rights=ChatAdministratorRights(
            is_anonymous=False,
            can_manage_chat=True,
            can_delete_messages=True,
            can_post_messages=True,
            can_edit_messages=True,
            can_invite_users=True,
            can_restrict_members=False,
            can_promote_members=False,
            can_change_info=False,
            can_pin_messages=True,
            can_manage_topics=False,
            can_manage_video_chats=True,
            can_post_stories=False,
            can_edit_stories=False,
            can_delete_stories=False,
        ),
        user_administrator_rights=ChatAdministratorRights(
            is_anonymous=False,
            can_manage_chat=True,
            can_delete_messages=True,
            can_post_messages=True,
            can_edit_messages=True,
            can_invite_users=True,
            can_restrict_members=False,
            can_promote_members=False,
            can_change_info=False,
            can_pin_messages=True,
            can_manage_topics=False,
            can_manage_video_chats=True,
            can_post_stories=False,
            can_edit_stories=False,
            can_delete_stories=False,
        ),
        bot_is_member=False,
    )
    kb = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[[KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª", request_chat=req)], [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    )
    await callback.message.answer(text, reply_markup=kb)

async def select_link_channel(callback: types.CallbackQuery, bot: Bot):
    await callback.answer("–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

async def sort_channels(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    sort_type = callback.data.split("_")[-1]
    db_path = await get_user_db_path(user_id, username)
    async with aiosqlite.connect(db_path) as db:
        if sort_type == "alpha":
            query = "SELECT * FROM channels ORDER BY channel_title"
            title = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É):"
        elif sort_type == "posts":
            query = (
                """
                SELECT c.*, COUNT(p.id) as post_count 
                FROM channels c 
                LEFT JOIN posts p ON c.channel_id = p.channel_id 
                GROUP BY c.channel_id 
                ORDER BY post_count DESC
                """
            )
            title = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ–≤):"
        else:
            query = "SELECT * FROM channels"
            title = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:"
        cursor = await db.execute(query)
        channels = await cursor.fetchall()
    await _display_channels_paginated(callback, channels, page=0, items_per_page=5, title=title, back_callback="list_channels", sort_type=sort_type)

# Accounts management
async def manage_accounts(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    await ensure_user_database(user_id, username)
    accounts = []
    async with aiosqlite.connect(db_path) as db:
        try:
            cursor = await db.execute("SELECT phone_number, is_main FROM linked_accounts")
            rows = await cursor.fetchall()
            accounts = [(r[0], bool(r[1])) for r in rows]
        except Exception:
            accounts = []
    await callback.message.edit_text("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:", reply_markup=get_manage_accounts_keyboard(accounts))

async def unlink_account(callback: types.CallbackQuery):
    # unlink_account_{phone}
    phone = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    async with aiosqlite.connect(db_path) as db:
        await db.execute("DELETE FROM linked_accounts WHERE phone_number = ?", (phone,))
        await db.commit()
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    await manage_accounts(callback)


async def set_main_account(callback: types.CallbackQuery):
    # set_main_{phone}
    phone = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    updated = False
    async with aiosqlite.connect(db_path) as db:
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ is_main —É –≤—Å–µ—Ö
            await db.execute("UPDATE linked_accounts SET is_main = 0")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_main –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
            await db.execute("UPDATE linked_accounts SET is_main = 1 WHERE phone_number = ?", (phone,))
            await db.commit()
            updated = True
        except Exception:
            updated = False
    if updated:
        await callback.answer("–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç", show_alert=True)
    await manage_accounts(callback)

async def admin_link_main_account(callback: types.CallbackQuery, state: FSMContext):
    await link_account(callback, state)

# Channel creation flow (minimal)
async def create_channel_start(callback: types.CallbackQuery):
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:", reply_markup=get_channel_name_method_keyboard())

async def create_channel_account(callback: types.CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

async def create_channel_type(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(channel_type=callback.data.replace("channel_type_", ""))
    await callback.answer("–¢–∏–ø –∫–∞–Ω–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    data = await state.get_data()
    if data.get("channel_create_pending") and data.get("channel_names"):
        await create_channel_do(callback, state)
    else:
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî —Å–ø—Ä–æ—Å–∏–º —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π:", reply_markup=get_channel_name_method_keyboard())
        await state.set_state(ChannelCreateStates.waiting_for_name_method)

async def create_channel_count(callback: types.CallbackQuery, state: FSMContext):
    try:
        count = int(callback.data.replace("channel_count_", ""))
        await state.update_data(channel_count=count)
        await callback.answer(f"–ö–æ–ª-–≤–æ: {count}")
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", show_alert=True)

async def process_channel_count_custom(message: types.Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count <= 0 or count > 100:
            raise ValueError
        await state.update_data(channel_count=count)
        await message.answer(f"–ö–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {count}")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–æ–≤
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=get_channel_type_keyboard())
        await state.set_state(ChannelCreateStates.waiting_for_channel_type)
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (<=100)")

async def create_channel_name_method(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "channel_name_manual":
        await channel_names_manual(callback, state)
    else:
        await channel_names_auto(callback, state)

async def create_channel_name_input(message: types.Message, state: FSMContext):
    names = [n.strip() for n in (message.text or "").split(",") if n.strip()]
    if not names:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    await state.update_data(channel_names=names, channel_create_pending=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=get_channel_type_keyboard())

async def check_bot_admin(callback: types.CallbackQuery):
    await callback.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

async def create_post_from_account(callback: types.CallbackQuery):
    await create_post(callback)

async def delete_account_menu(callback: types.CallbackQuery):
    await manage_accounts(callback)

async def post_account_select(callback: types.CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

async def post_channel_select(callback: types.CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

async def post_content_send(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ (—Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞) –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")

async def delete_account_confirm(callback: types.CallbackQuery):
    await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")

async def delete_account_do(callback: types.CallbackQuery):
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")

async def periodic_donor_select(callback: types.CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä –¥–æ–Ω–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ —Å–∫–æ—Ä–æ")

async def post_from_account_manual(callback: types.CallbackQuery):
    await callback.answer("–†—É—á–Ω–æ–π –ø–æ—Å—Ç –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–∫–æ—Ä–æ")

async def post_from_account_auto(callback: types.CallbackQuery):
    await callback.answer("–ê–≤—Ç–æ–ø–æ—Å—Ç –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–∫–æ—Ä–æ")

async def autoacc_donor_select(callback: types.CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä –¥–æ–Ω–æ—Ä–∞ (–∞–≤—Ç–æ) —Å–∫–æ—Ä–æ")

async def autoacc_target_select(callback: types.CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä —Ü–µ–ª–µ–π (–∞–≤—Ç–æ) —Å–∫–æ—Ä–æ")

async def autoacc_targets_selected(callback: types.CallbackQuery):
    await callback.answer("–¶–µ–ª–∏ –≤—ã–±—Ä–∞–Ω—ã")

async def public_once_target_select(callback: types.CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä —Ü–µ–ª–∏ (—Ä–∞–∑–æ–≤–∞—è) —Å–∫–æ—Ä–æ")

async def public_periodic_target_select(callback: types.CallbackQuery, state: FSMContext):
    """–¢–æ–≥–≥–ª –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞."""
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    parts = callback.data.split("_")
    last = parts[-1]
    if last == "all":
        channels = await _fetch_user_channels(user_id, username)
        all_ids = [cid for cid, _ in channels]
        await state.update_data(selected_targets=all_ids)
        selected_ids = all_ids
    else:
        try:
            channel_id = int(last)
        except Exception:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return
        selected_ids, _ = await _toggle_id_in_state_list(state, 'selected_targets', channel_id)
        channels = await _fetch_user_channels(user_id, username)

    await _render_select_list(
        callback,
        items=channels,
        selected_ids=selected_ids,
        build_callback_prefix="public_periodic_target",
        title_text="üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        done_callback="public_periodic_targets_selected",
        back_callback="auto_periodic",
    )

async def public_periodic_targets_selected(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π ‚Äî —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Ä–µ–ø–æ—Å—Ç–æ–≤ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–≤–µ–∂–µ—Å—Ç–∏
    await create_repost_stream_from_state(callback, state)

async def auto_random(callback: types.CallbackQuery):
    # –°–Ω–∞—á–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–æ—Ä–æ–≤
    await callback.message.edit_text("üé≤ –°–∫–æ–ª—å–∫–æ –¥–æ–Ω–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?", reply_markup=get_donor_count_keyboard())

async def auto_periodic(callback: types.CallbackQuery):
    # –î–ª—è –ø–æ—Ç–æ–∫–æ–≤ —Ä–µ–ø–æ—Å—Ç–æ–≤ ‚Äî —Ç–æ–∂–µ —Å–ø—Ä–æ—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await callback.message.edit_text("üîÅ –î–æ–Ω–æ—Ä—ã –¥–ª—è –ø–æ—Ç–æ–∫–∞: –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ?", reply_markup=get_periodic_donor_count_keyboard())

async def periodic_source_linked(callback: types.CallbackQuery):
    await callback.answer("–ü–æ—Ç–æ–∫ –∏–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ")

async def periodic_source_public(callback: types.CallbackQuery, state: FSMContext):
    # –°—Ç–∞—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–æ–Ω–æ—Ä(–æ–≤)
    data = await state.get_data()
    allow_multi = bool(data.get('periodic_allow_multiple', False))
    hint = "–æ–¥–Ω–æ–≥–æ" if not allow_multi else "–æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª-–¥–æ–Ω–æ—Ä–∞ ‚Äî {hint}:" 
        "\n–ù–∞–ø—Ä–∏–º–µ—Ä: @telegrammm, https://t.me/telegrammm"
    )
    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –º—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    await state.update_data(periodic_flow="public", selected_targets=[])
    await state.set_state(PostStates.waiting_for_public_channel_input)

async def random_donor_select(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    try:
        channel_id = int(callback.data.split("_")[-1])
    except Exception:
        if callback.data.endswith("_all"):
            return await random_select_all_donors(callback, state)
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return
    data = await state.get_data()
    allow_multi = bool(data.get('allow_multiple_donors', False))
    selected_ids, _ = await _toggle_id_in_state_list(state, 'selected_donors', channel_id)
    channels = await _get_all_user_channels(user_id, username)
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=selected_ids,
        build_callback_prefix="random_donor",
        title_text=("üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã-–¥–æ–Ω–æ—Ä—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):" if allow_multi else "üì° –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª-–¥–æ–Ω–æ—Ä–∞:"),
        done_callback="random_donors_selected",
        back_callback="auto_random",
    )

async def random_target_select(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    try:
        channel_id = int(callback.data.split("_")[-1])
    except Exception:
        if callback.data.endswith("_all"):
            return await random_select_all_targets(callback, state)
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return
    selected_ids, _ = await _toggle_id_in_state_list(state, 'selected_targets', channel_id)
    data = await state.get_data()
    donors = data.get('selected_donors', [])
    channels = await _fetch_user_channels(user_id, username, exclude_ids=donors)
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=selected_ids,
        build_callback_prefix="random_target",
        title_text="üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        done_callback="random_targets_selected",
        back_callback="auto_random",
    )

async def random_donors_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_donors: list[int] = data.get('selected_donors', [])
    if not selected_donors:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞", show_alert=True)
        return
    await state.update_data(random_is_public=False)
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    channels = await _fetch_user_channels(user_id, username, exclude_ids=selected_donors)
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=[],
        build_callback_prefix="random_target",
        title_text="üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        done_callback="random_targets_selected",
        back_callback="auto_random",
    )
    await state.set_state(PostStates.waiting_for_random_targets)
    await state.update_data(selected_targets=[])

async def random_targets_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    targets: list[int] = data.get('selected_targets', [])
    if not targets:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª", show_alert=True)
        return
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å (—á–∏—Å–ª–æ):")
    await state.set_state(PostStates.waiting_for_random_posts_per_day)

async def process_random_interval(message: types.Message, state: FSMContext):
    await state.update_data(random_interval=message.text.strip())
    await message.answer("–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

async def process_random_posts_per_day(message: types.Message, state: FSMContext):
    try:
        posts = int(message.text.strip())
        if posts <= 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    await state.update_data(posts_per_day=posts)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ–∂–µ—Å—Ç—å –ø–æ—Å—Ç–æ–≤ –¥–æ–Ω–æ—Ä–∞:",
        reply_markup=get_post_freshness_keyboard()
    )
    await state.set_state(PostStates.waiting_for_random_freshness)

async def process_post_freshness(callback: types.CallbackQuery, state: FSMContext):
    freshness = int(callback.data.split("_")[-1])
    await state.update_data(post_freshness=freshness)
    await callback.answer("–°–≤–µ–∂–µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    data = await state.get_data()
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ‚Äî —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
    if data.get("create_repost_stream") or data.get("periodic_flow") == "public":
        await create_repost_stream_from_state(callback, state)
        return
    await callback.answer("–°–≤–µ–∂–µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

async def process_random_freshness(callback: types.CallbackQuery, state: FSMContext):
    freshness = int(callback.data.split("_")[-1])
    await state.update_data(random_freshness=freshness)
    await callback.answer("–°–≤–µ–∂–µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    await confirm_create_random_stream(callback, state)

# Scheduled posts management
async def scheduled_posts(callback: types.CallbackQuery):
    await callback.message.edit_text("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:", reply_markup=get_scheduled_posts_keyboard())

async def scheduled_posts_single(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    data = await get_scheduled_posts(user_id, username)
    await _display_scheduled_posts_paginated(callback, data.get('posts', []), page=0, items_per_page=5, title="üìù –í–∞—à–∏ –µ–¥–∏–Ω–∏—á–Ω—ã–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:", back_callback="scheduled_posts", post_type="post")

async def scheduled_posts_streams(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    data = await get_scheduled_posts(user_id, username)
    await _display_scheduled_posts_paginated(callback, data.get('repost_streams', []), page=0, items_per_page=5, title="üîÑ –í–∞—à–∏ –ø–æ—Ç–æ–∫–∏ —Ä–µ–ø–æ—Å—Ç–æ–≤:", back_callback="scheduled_posts", post_type="stream")

async def scheduled_posts_random(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    data = await get_scheduled_posts(user_id, username)
    # Display random stream configurations (from random_posts table)
    await _display_scheduled_posts_paginated(
        callback,
        data.get('old_random_posts', []),
        page=0,
        items_per_page=5,
        title="üé≤ –í–∞—à–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        back_callback="scheduled_posts",
        post_type="random_stream_config",
    )

async def post_action(callback: types.CallbackQuery):
    # post_action_{post_type}_{id}
    parts = callback.data.split("_")
    post_id = int(parts[-1])
    post_type = "_".join(parts[2:-1])
    await callback.message.edit_text("üõ† –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å—Ç–æ–º:", reply_markup=get_post_action_keyboard(post_id, post_type))

async def delete_post(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    post_id = int(parts[-1])
    post_type = "_".join(parts[2:-1])
    await callback.message.edit_text("‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:", reply_markup=get_confirm_delete_keyboard(post_id, post_type))

async def confirm_delete(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    post_id = int(parts[-1])
    post_type = "_".join(parts[2:-1])
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    # Map type for DB
    db_type = {
        'post': 'post',
        'repost_stream': 'repost_stream',
        'random_stream': 'random_post',
        'random_stream_config': 'random_post',
    }.get(post_type, 'post')
    await delete_scheduled_post(user_id, username, post_id, db_type)
    await send_success_message(callback, "‚úÖ –£–¥–∞–ª–µ–Ω–æ", back_callback="scheduled_posts")

async def change_donor(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    post_id = int(parts[-1])
    post_type = "_".join(parts[2:-1])
    await state.update_data(change_donor_target=(post_id, post_type))
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –¥–æ–Ω–æ—Ä–∞ (username –∏–ª–∏ id):")
    await state.set_state(ScheduledPostsStates.waiting_for_new_donor)

async def process_new_donor(message: types.Message, state: FSMContext):
    data = await state.get_data()
    target = data.get('change_donor_target')
    if not target:
        await message.answer("–ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        return
    post_id, post_type = target
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    await update_post_donor(user_id, username, post_id, post_type, message.text.strip())
    await state.clear()
    await message.answer("‚úÖ –î–æ–Ω–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω")

async def select_source_channel(callback: types.CallbackQuery, state: FSMContext):
    try:
        channel_id = int(callback.data.split("_")[-1])
        await state.update_data(source_channel_id=channel_id)
        await callback.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω")
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞", show_alert=True)

async def show_random_post_details(callback: types.CallbackQuery):
    # Support optional page in callback data formats:
    # - show_random_post_details_{post_id}
    # - show_random_post_details_{post_id}_{page}
    parts = callback.data.split("_")
    try:
        # If last part is page and second-last is id
        if len(parts) >= 2 and parts[-1].isdigit() and parts[-2].isdigit():
            page = int(parts[-1])
            post_id = int(parts[-2])
        elif len(parts) >= 1 and parts[-1].isdigit():
            post_id = int(parts[-1])
            page = 0
        else:
            raise ValueError("no id")
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id", show_alert=True)
        return

    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)

    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute("""
            SELECT donor_channels, target_channels, posts_per_day, post_freshness
            FROM random_posts WHERE id = ?
        """, (post_id,))
        row = await cursor.fetchone()
    if not row:
        # –ü–æ—Ç–æ–∫ –º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –∞–ª–µ—Ä—Ç–∞
        data = await get_scheduled_posts(user_id, username)
        await _display_scheduled_posts_paginated(
            callback,
            data.get('old_random_posts', []),
            page=0,
            items_per_page=5,
            title="üé≤ –í–∞—à–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            back_callback="scheduled_posts",
            post_type="random_stream_config",
        )
        return
    donors_json, targets_json, ppd, freshness = row
    donors = safe_json_loads(donors_json, [])
    targets = safe_json_loads(targets_json, [])

    async def resolve_channel_name(db_path_local, ch):
        if isinstance(ch, int):
            async with aiosqlite.connect(db_path_local) as db_l:
                cur = await db_l.execute("SELECT channel_title, channel_username FROM channels WHERE channel_id = ?", (ch,))
                r = await cur.fetchone()
                if r:
                    title, uname = r
                    return (f"@{uname}" if uname else None) or (title or str(ch))
            return str(ch)
        s = str(ch)
        if s.startswith('@'):
            return s
        if s.lstrip('-').isdigit():
            return await resolve_channel_name(db_path_local, int(s))
        return s

    donor_names = []
    for d in (donors if isinstance(donors, list) else []):
        donor_names.append(await resolve_channel_name(db_path, d))

    header = (
        f"üé≤ –ü–æ—Ç–æ–∫ #{post_id}\n"
        f"–î–æ–Ω–æ—Ä—ã: {len(donors) if isinstance(donors, list) else 0}\n"
        f"–¶–µ–ª–µ–π: {len(targets) if isinstance(targets, list) else 0}\n\n"
    )

    from datetime import datetime, timedelta
    now_buf = datetime.now() + timedelta(seconds=60)

    per_page = 10
    per_target_times = []
    if isinstance(targets, list):
        async with aiosqlite.connect(db_path) as db_l:
            for target in targets:
                display_target = await resolve_channel_name(db_path, target)
                try:
                    cur = await db_l.execute(
                        """
                        SELECT scheduled_time FROM posts
                        WHERE random_post_id = ? AND channel_id = ? AND is_published = 0
                          AND scheduled_time > ?
                        ORDER BY scheduled_time ASC
                        """,
                        (post_id, target, datetime.now().isoformat())
                    )
                    rows = await cur.fetchall()
                except Exception:
                    rows = []
                times_list = []
                for (tval,) in rows:
                    try:
                        dt = datetime.fromisoformat(str(tval))
                        if dt > now_buf:
                            times_list.append(dt)
                    except Exception:
                        continue
                times_list.sort()
                per_target_times.append((display_target, times_list))

    # compute max pages across targets
    max_pages = 0
    for _, tl in per_target_times:
        pages = max(0, (len(tl) - 1) // per_page)
        if pages > max_pages:
            max_pages = pages

    sections = []
    for idx, (display_target, tl) in enumerate(per_target_times, start=1):
        start = page * per_page
        chunk = tl[start:start + per_page]
        formatted_times = [dt.strftime("%d.%m - %H:%M") for dt in chunk]
        section_text = (
            f"¬´{display_target}#{idx}:\n"
            f"–ü–æ—Å—Ç–æ–≤/–¥–µ–Ω—å: {ppd}\n"
            f"–°–≤–µ–∂–µ—Å—Ç—å: {freshness} –¥\n"
            f"–î–æ–Ω–æ—Ä—ã: {', '.join(donor_names) if donor_names else '‚Äî'}\n"
            f"–¶–µ–ª—å: {display_target}\n"
            + ("–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n" + ",\n ".join(formatted_times) if formatted_times else "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n‚Äî")
        )
        sections.append(section_text)

    text = header + "\n\n".join(sections) if sections else header.rstrip()

    # build keyboard: top row actions, middle nav, bottom back
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    kb_rows = []
    # actions row
    kb_rows.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data=f"delete_post_random_stream_{post_id}"),
        InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –¥–æ–Ω–æ—Ä–∞", callback_data=f"change_donor_random_stream_{post_id}")
    ])
    # nav row
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"show_random_post_details_{post_id}_{page-1}"))
    if page < max_pages:
        nav.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"show_random_post_details_{post_id}_{page+1}"))
    if nav:
        kb_rows.append(nav)
    # back row
    kb_rows.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="scheduled_posts")])

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows))

async def paginate_random_times(callback: types.CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    try:
        _, _, _, stream_id_str, page_str = callback.data.split("_")
        stream_id = int(stream_id_str)
        page = int(page_str)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute("SELECT next_post_times_json, donor_channels, target_channels, posts_per_day, post_freshness FROM random_posts WHERE id = ?", (stream_id,))
        row = await cursor.fetchone()
    if not row:
        data = await get_scheduled_posts(user_id, username)
        await _display_scheduled_posts_paginated(
            callback,
            data.get('old_random_posts', []),
            page=0,
            items_per_page=5,
            title="üé≤ –í–∞—à–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            back_callback="scheduled_posts",
            post_type="random_stream_config",
        )
        return
    times_json, donors_json, targets_json, ppd, freshness = row
    all_times_raw = safe_json_loads(times_json, []) or []
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ
    future_times_dt = []
    for t in all_times_raw:
        try:
            dt = datetime.fromisoformat(str(t))
            if dt > datetime.now():
                future_times_dt.append(dt)
        except Exception:
            continue
    future_times_dt.sort()
    # –û–±–Ω–æ–≤–∏–º –ë–î –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if len(future_times_dt) != len(all_times_raw):
        try:
            async with aiosqlite.connect(db_path) as db:
                await db.execute(
                    "UPDATE random_posts SET next_post_times_json = ? WHERE id = ?",
                    (json.dumps([dt.isoformat() for dt in future_times_dt]), stream_id)
                )
                await db.commit()
        except Exception:
            pass
    donors = safe_json_loads(donors_json, [])
    targets = safe_json_loads(targets_json, [])
    start = page * 10
    end = start + 10
    chunk = future_times_dt[start:end]
    formatted_times = [dt.strftime("%d.%m - %H:%M") for dt in chunk]
    text = (
        f"üé≤ –ü–æ—Ç–æ–∫ #{stream_id}\n"
        f"–î–æ–Ω–æ—Ä–æ–≤: {len(donors) if isinstance(donors, list) else 0}\n"
        f"–¶–µ–ª–µ–π: {len(targets) if isinstance(targets, list) else 0}\n"
        f"–ü–æ—Å—Ç–æ–≤/–¥–µ–Ω—å: {ppd}\n"
        f"–°–≤–µ–∂–µ—Å—Ç—å: {freshness} –¥\n"
        f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n " + ",\n ".join(formatted_times)
    )
    # –ü–æ—Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    total_pages = max(0, (len(future_times_dt) - 1) // 10)
    kb = InlineKeyboardBuilder()
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"random_times_page_{stream_id}_{page-1}"))
    if page < total_pages:
        nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"random_times_page_{stream_id}_{page+1}"))
    if nav_row:
        kb.row(*nav_row)
    actions = get_post_action_keyboard(stream_id, 'random_stream')
    nav_markup = kb.as_markup()
    nav_inline = nav_markup.inline_keyboard
    final_inline = nav_inline + (actions.inline_keyboard if hasattr(actions, 'inline_keyboard') else [])
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=final_inline))

async def confirm_create_periodic(callback: types.CallbackQuery):
    await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞ —Å–∫–æ—Ä–æ")

async def confirm_create_random(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ –¥–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await create_random_stream_from_state(callback, state)

async def confirm_create_single(callback: types.CallbackQuery):
    await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å–∫–æ—Ä–æ")

async def cancel_create_post(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await send_success_message(callback, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", back_callback="back_to_menu")

async def process_admin_password(message: types.Message, state: FSMContext):
    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö
    await state.clear()
    await message.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())

async def donor_type_linked(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    channels = await _get_all_user_channels(user_id, username)
    if not channels:
        await callback.answer("–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", show_alert=True)
        return
    # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω ‚Äî –æ—Ç–º–µ—Ç–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —Å–¥–µ–ª–∞–µ–º –∞–≤—Ç–æ—Å–±—Ä–æ—Å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ
    data = await state.get_data()
    allow_multi = bool(data.get('allow_multiple_donors', False))
    title = "üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã-–¥–æ–Ω–æ—Ä—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):" if allow_multi else "üì° –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª-–¥–æ–Ω–æ—Ä–∞:"
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=[],
        build_callback_prefix="random_donor",
        title_text=title,
        done_callback="random_donors_selected",
        back_callback="auto_random",
    )
    # –í—ã–±–æ—Ä –¥–æ–Ω–æ—Ä–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö random_donor_select/random_donors_selected
    await state.set_state(PostStates.waiting_for_random_donors)

async def donor_type_public(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª(—ã)-–¥–æ–Ω–æ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n–ü—Ä–∏–º–µ—Ä: @news, https://t.me/example",
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤ –∏ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –¥–æ–Ω–æ—Ä—ã –ø—É–±–ª–∏—á–Ω—ã–µ
    await state.update_data(selected_donors=[], random_is_public=True)
    await state.set_state(PostStates.waiting_for_random_donors)

async def public_random_target_select(callback: types.CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä —Ü–µ–ª–µ–π (–ø—É–±–ª–∏—á–Ω—ã–π —Ä–∞–Ω–¥–æ–º) —Å–∫–æ—Ä–æ")

async def public_random_targets_selected(callback: types.CallbackQuery):
    await callback.answer("–¶–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

async def channel_generate_one(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(channel_count=1)
    await channel_names_auto(callback, state)

async def channel_generate_many(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (—á–∏—Å–ª–æ):")
    await state.set_state(ChannelCreateStates.waiting_for_generate_count)

async def process_generate_count(message: types.Message, state: FSMContext):
    try:
        count = int(message.text.strip())
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    await state.update_data(channel_count=count)
    await channel_names_auto(callback=types.CallbackQuery(message=message), state=state)

async def cancel_reply_keyboard(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    user_info = await get_user_info(user_id, username)
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard(user_info))

# --- –î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ ---
async def process_public_random_donors(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞")
        return
    raw_items = [p.strip() for p in text.replace(";", ",").split(",") if p.strip()]
    donors: list[str | int] = []
    for item in raw_items:
        if item.startswith("http"):
            username = item.split("/")[-1]
            username = username.split("?")[0].split("#")[0]
            donors.append(f"@{username}")
        elif item.startswith("@"):
            # –£–±–µ—Ä—ë–º –¥—É–±–ª–∏ @ –∏ –≤–æ–∑—å–º—ë–º –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
            seg = item.split("@")[-1]
            donors.append(f"@{seg}")
        elif item.isdigit():
            donors.append(int(item))
        else:
            donors.append(f"@{item}")
    data = await state.get_data()
    allow_multi = bool(data.get('allow_multiple_donors', False))
    if not allow_multi and donors:
        donors = donors[:1]
    await state.update_data(selected_donors=donors, random_is_public=True)
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    channels = await _fetch_user_channels(user_id, username)
    await _render_select_list(
        message,
        items=channels,
        selected_ids=[],
        build_callback_prefix="random_target",
        title_text="üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        done_callback="random_targets_selected",
        back_callback="auto_random",
    )
    await state.set_state(PostStates.waiting_for_random_targets)
    await state.update_data(selected_targets=[])

async def random_select_all_donors(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    channels = await _get_all_user_channels(user_id, username)
    all_ids = [cid for cid, _ in channels]
    await state.update_data(selected_donors=all_ids)
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=all_ids,
        build_callback_prefix="random_donor",
        title_text="üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã-–¥–æ–Ω–æ—Ä—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        done_callback="random_donors_selected",
        back_callback="auto_random",
    )

async def random_select_all_targets(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    data = await state.get_data()
    donors = data.get('selected_donors', [])
    channels = await _fetch_user_channels(user_id, username, exclude_ids=donors)
    all_ids = [cid for cid, _ in channels]
    await state.update_data(selected_targets=all_ids)
    await _render_select_list(
        callback,
        items=channels,
        selected_ids=all_ids,
        build_callback_prefix="random_target",
        title_text="üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        done_callback="random_targets_selected",
        back_callback="auto_random",
    )

async def confirm_create_random_stream(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    donors = data.get('selected_donors', [])
    targets = data.get('selected_targets', [])
    posts_per_day = data.get('posts_per_day', 1)
    freshness = data.get('random_freshness', data.get('post_freshness', 7))
    is_public = data.get('random_is_public', False)
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –≤–∏–¥–µ @username, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ channels
    donor_text = "‚Äî"
    target_text = "‚Äî"
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or str(user_id)
        db_path = await get_user_db_path(user_id, username)
        async with aiosqlite.connect(db_path) as db:
            donor_names = []
            for d in (donors if isinstance(donors, list) else []):
                try:
                    s = str(d)
                except Exception:
                    donor_names.append(str(d))
                    continue
                if s.startswith('@'):
                    donor_names.append(s)
                    continue
                if s.lstrip('-').isdigit():
                    try:
                        cur = await db.execute("SELECT channel_username FROM channels WHERE channel_id = ?", (int(s),))
                        r = await cur.fetchone()
                        if r and r[0]:
                            donor_names.append(f"@{r[0]}")
                        else:
                            donor_names.append(s)
                    except Exception:
                        donor_names.append(s)
                    continue
                donor_names.append(s)

            target_names = []
            for t in (targets if isinstance(targets, list) else []):
                try:
                    s = str(t)
                except Exception:
                    target_names.append(str(t))
                    continue
                if s.startswith('@'):
                    target_names.append(s)
                    continue
                if s.lstrip('-').isdigit():
                    try:
                        cur = await db.execute("SELECT channel_username FROM channels WHERE channel_id = ?", (int(s),))
                        r = await cur.fetchone()
                        if r and r[0]:
                            target_names.append(f"@{r[0]}")
                        else:
                            target_names.append(s)
                    except Exception:
                        target_names.append(s)
                    continue
                target_names.append(s)

            donor_text = ", ".join(donor_names) if donor_names else "‚Äî"
            target_text = ", ".join(target_names) if target_names else "‚Äî"
    except Exception:
        donor_text = ", ".join([str(d) for d in donors]) if donors else "‚Äî"
        target_text = ", ".join([str(t) for t in targets]) if targets else "‚Äî"
    summary = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:\n\n"
        f"–î–æ–Ω–æ—Ä—ã: {donor_text}\n"
        f"–¶–µ–ª–∏: {target_text}\n"
        f"–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {posts_per_day}\n"
        f"–°–≤–µ–∂–µ—Å—Ç—å: {freshness} –¥–Ω\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {'–ø—É–±–ª–∏—á–Ω—ã–µ' if is_public else '–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ'}\n"
    )
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_create_random"))
    kb.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_post"))
    if hasattr(callback, 'message'):
        await callback.message.edit_text(summary, reply_markup=kb.as_markup())
    else:
        await callback.answer(summary)

    # Set state so the confirm button handler is active
    await state.set_state(PostStates.waiting_for_confirm_random)

async def create_random_stream_from_state(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    donors = data.get('selected_donors', [])
    targets = data.get('selected_targets', [])
    posts_per_day: int = int(data.get('posts_per_day', 1))
    freshness: int = int(data.get('random_freshness', data.get('post_freshness', 7)))
    is_public: bool = bool(data.get('random_is_public', False))

    if not donors or not targets:
        await callback.answer("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –¥–æ–Ω–æ—Ä—ã –∏–ª–∏ —Ü–µ–ª–∏", show_alert=True)
        return

    db_path = await get_user_db_path(user_id, username)
    phone_number = None
    if not is_public:
        async with aiosqlite.connect(db_path) as db:
            try:
                cur = await db.execute("SELECT phone_number FROM linked_accounts LIMIT 1")
                row = await cur.fetchone()
                phone_number = row[0] if row else None
            except Exception:
                phone_number = None
        if not phone_number:
            await send_error_message(callback, "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤—è–∑–∫–æ–π'", back_callback="back_to_menu")
            return

    now = datetime.now()
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å—Ç—ã –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –°–ï–ì–û–î–ù–Ø (–¥–æ 23:59:59)
    day_end = now.replace(hour=23, minute=59, second=59, microsecond=999999)
    times: list[str] = []
    remaining_seconds_total = (day_end - now).total_seconds()
    if remaining_seconds_total <= 0:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Å–¥–≤–∏–Ω–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–∏–Ω—É—Ç—ã –≤–ø–µ—Ä–µ–¥
        remaining_seconds_total = 60
        day_end = now + timedelta(seconds=remaining_seconds_total)

    remaining_minutes = max(1, int(remaining_seconds_total // 60))

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ç—Å–µ—á–∫–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –æ–∫–æ–ª–æ-–ø—Ä–æ—à–µ–¥—à–∏–µ —Å–ª–æ—Ç—ã
    min_future = now + timedelta(minutes=2)

    generated_datetimes: list[datetime] = []
    if posts_per_day <= remaining_minutes:
        picked_minutes = sorted(random.sample(range(remaining_minutes), posts_per_day))
        for m in picked_minutes:
            dt = now + timedelta(minutes=m, seconds=random.randint(0, 59))
            if dt < min_future:
                dt = min_future
            if dt > day_end:
                dt = day_end
            if dt > now and dt <= day_end:
                generated_datetimes.append(dt)
    else:
        # –ü–æ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –º–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –º–∏–Ω—É—Ç–∞–º
        step = remaining_minutes / posts_per_day if posts_per_day > 0 else 1
        for i in range(posts_per_day):
            offset_minutes = int(i * step)
            dt = now + timedelta(minutes=offset_minutes, seconds=random.randint(0, 59))
            if dt < min_future:
                dt = min_future
            if dt > day_end:
                dt = day_end
            generated_datetimes.append(dt)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ ISO
    generated_datetimes = sorted(generated_datetimes)
    # –î–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Å–ª—É—á–∞–π–Ω–æ–µ).
    # –í–∞–∂–Ω–æ: `posts_per_day` –≤ UI —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
    # –¥–ª—è –≤—Å–µ–≥–æ –ø–æ—Ç–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –ø–æ —Ü–µ–ª—è–º
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute(
            """
            INSERT INTO random_posts (
                donor_channels, target_channels, posts_per_day, post_freshness,
                is_active, last_post_time, phone_number, is_public_channel, next_post_times_json
            ) VALUES (?, ?, ?, ?, 1, NULL, ?, ?, ?)
            """,
            (
                json.dumps(donors), json.dumps(targets), posts_per_day, freshness,
                phone_number, 1 if is_public else 0, json.dumps([]) # will fill below
            )
        )
        stream_id = cursor.lastrowid
        union_times = []
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
        all_targets = targets if isinstance(targets, list) else []
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º `posts_per_day` –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –í –î–ï–ù–¨ –ù–ê –ö–ê–ñ–î–£–Æ –¶–ï–õ–¨
        for idx_target, target_channel in enumerate((all_targets if isinstance(all_targets, list) else []), start=0):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏
            target_generated: list[datetime] = []
            per_target_posts = int(posts_per_day)
            if per_target_posts <= remaining_minutes:
                picked_minutes = sorted(random.sample(range(remaining_minutes), per_target_posts))
                for m in picked_minutes:
                    dt = now + timedelta(minutes=m, seconds=random.randint(0, 59))
                    if dt < min_future:
                        dt = min_future
                    if dt > day_end:
                        dt = day_end
                    if dt > now and dt <= day_end:
                        target_generated.append(dt)
            else:
                step = remaining_minutes / per_target_posts if per_target_posts > 0 else 1
                for i in range(per_target_posts):
                    offset_minutes = int(i * step)
                    dt = now + timedelta(minutes=offset_minutes, seconds=random.randint(0, 59))
                    if dt < min_future:
                        dt = min_future
                    if dt > day_end:
                        dt = day_end
                    target_generated.append(dt)
            target_generated = sorted(target_generated)
            # –í—Å—Ç–∞–≤–∏–º —ç—Ç–∏ –≤—Ä–µ–º–µ–Ω–∞ –≤ posts
            for dt in target_generated:
                try:
                    await db.execute(
                        """
                        INSERT INTO posts (
                            channel_id, content_type, content, scheduled_time, is_periodic,
                            period_hours, is_published, random_post_id, donor_channels_json,
                            target_channels_json, post_freshness, phone_number, is_public_channel
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """,
                        (
                            target_channel,
                            'random',
                            f'–†–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Å—Ç ({dt.strftime("%d.%m %H:%M")})',
                            dt.isoformat(),
                            0,
                            0,
                            0,
                            stream_id,
                            json.dumps(donors),
                            json.dumps(targets),
                            freshness,
                            phone_number,
                            1 if is_public else 0,
                        )
                    )
                    union_times.append(dt)
                except Exception:
                    continue
        # –û–±–Ω–æ–≤–∏–º next_post_times_json –∫–∞–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö –≤—Ä–µ–º—ë–Ω
        try:
            await db.execute(
                "UPDATE random_posts SET next_post_times_json = ? WHERE id = ?",
                (json.dumps([t.isoformat() for t in sorted(union_times)]), stream_id)
            )
        except Exception:
            pass
        await db.commit()

    await state.clear()
    await send_success_message(callback, "‚úÖ –†–∞–Ω–¥–æ–º–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", back_callback="scheduled_posts")

async def admin_search(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_search_query)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å username –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞:")

async def process_admin_search(message: types.Message, state: FSMContext):
    query = (message.text or '').strip().lstrip('@')
    users = await _fetch_all_users()
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ username/ID
    filtered = []
    for u in users:
        if query.isdigit() and str(u['user_id']).startswith(query):
            filtered.append(u)
        elif u['username'] and query.lower() in u['username'].lower():
            filtered.append(u)
    await state.clear()
    if not filtered:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardBuilder()
    for u in filtered[:10]:
        kb.row(InlineKeyboardButton(text=f"@{u['username']} ({u['days_left']} –¥)", callback_data=f"admin_user_{u['user_id']}_0_alpha"))
    kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users_management"))
    await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=kb.as_markup())

async def show_post_details(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª–∫–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã posts."""
    try:
        post_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id", show_alert=True)
        return
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute(
            """
            SELECT p.id, p.channel_id, p.channel_username, p.content_type, p.content,
                   p.media_id, p.scheduled_time, p.is_published, c.channel_title
            FROM posts p
            LEFT JOIN channels c ON p.channel_id = c.channel_id
            WHERE p.id = ?
            """,
            (post_id,)
        )
        row = await cursor.fetchone()
    if not row:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    (_pid, channel_id, channel_username, content_type, content, media_id, scheduled_time, is_published, channel_title) = row
    channel_name = channel_title or channel_username or f"–ö–∞–Ω–∞–ª {channel_id}"
    try:
        from datetime import datetime
        scheduled_dt = datetime.fromisoformat(str(scheduled_time))
        formatted_time = scheduled_dt.strftime("%d.%m.%Y %H:%M")
    except Exception:
        formatted_time = str(scheduled_time)
    text = (
        f"üìù –ü–æ—Å—Ç #{post_id}\n"
        f"–ö–∞–Ω–∞–ª: {channel_name}\n"
        f"–¢–∏–ø: {content_type}\n"
        f"–í—Ä–µ–º—è: {formatted_time}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' if is_published else '–æ–∂–∏–¥–∞–µ—Ç'}"
    )
    await callback.message.edit_text(text, reply_markup=get_post_action_keyboard(post_id, 'post'))

async def create_repost_stream_from_state(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ –¥–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    data = await state.get_data()
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    donor_channel = data.get('public_channel')
    donor_list = data.get('public_channel_list')
    targets: list[int] = data.get('selected_targets', []) or []
    if not donor_channel and not donor_list or not targets:
        await callback.answer("–£–∫–∞–∂–∏—Ç–µ –¥–æ–Ω–æ—Ä–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã", show_alert=True)
        return
    db_path = await get_user_db_path(user_id, username)
    async with aiosqlite.connect(db_path) as db:
        if donor_list and isinstance(donor_list, list):
            for donor in donor_list:
                await db.execute(
                    """
                    INSERT INTO repost_streams (
                        donor_channel, target_channels, last_message_id, phone_number,
                        is_public_channel, post_freshness, is_active
                    ) VALUES (?, ?, 0, ?, 1, 0, 1)
                    """,
                    (donor, json.dumps(targets), "")
                )
        else:
            await db.execute(
                """
                INSERT INTO repost_streams (
                    donor_channel, target_channels, last_message_id, phone_number,
                    is_public_channel, post_freshness, is_active
                ) VALUES (?, ?, 0, ?, 1, 0, 1)
                """,
                (donor_channel, json.dumps(targets), "")
            )
        await db.commit()
    await state.clear()
    # –ü–æ–∫–∞–∂–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    user_info = await get_user_info(user_id, username)
    await callback.message.edit_text("‚úÖ –ü–æ—Ç–æ–∫ —Ä–µ–ø–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω!", reply_markup=get_main_menu_keyboard(user_info))

async def create_channels_for_account(callback: types.CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–ª–æ—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    phone = callback.data.split("_")[-1]
    await state.update_data(channel_create_phone=phone)
    await channel_generate_many(callback, state)

async def delete_channels_for_account(callback: types.CallbackQuery):
    # –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    channels = []
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute("SELECT channel_id, channel_title FROM channels")
        channels = await cursor.fetchall()
    phone = callback.data.split("_")[-1]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_channels_list_keyboard(channels, phone))

async def delete_channel_for_account(callback: types.CallbackQuery):
    # delete_channel_{channel_id}_{phone}
    parts = callback.data.split("_")
    try:
        channel_id = int(parts[2])
        phone = parts[3]
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ Pyrogram –∏ –∏–∑ –ë–î
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    # –ü–æ–ª—É—á–∞–µ–º session_string –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    session_string = None
    async with aiosqlite.connect(db_path) as db:
        try:
            cur = await db.execute("SELECT session_string FROM linked_accounts WHERE phone_number = ?", (phone,))
            row = await cur.fetchone()
            session_string = row[0] if row else None
        except Exception:
            session_string = None
    if not session_string:
        await callback.answer("–ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)
    else:
        client = Client("delete_channel", api_id=Config.API_ID, api_hash=Config.API_HASH, session_string=session_string, in_memory=True)
        try:
            await client.start()
            try:
                await client.delete_channel(channel_id)
            except Exception as e:
                # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram
                pass
        finally:
            try:
                await client.stop()
            except Exception:
                pass
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
    async with aiosqlite.connect(db_path) as db:
        await db.execute("DELETE FROM channels WHERE channel_id = ?", (channel_id,))
        await db.commit()
    await callback.answer("–ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels = []
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute("SELECT channel_id, channel_title FROM channels")
        channels = await cursor.fetchall()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_channels_list_keyboard(channels, phone))

async def manage_posts_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–º–∏:", reply_markup=get_manage_posts_keyboard())

# --- Missing binding menu handler ---
async def manage_binding_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=get_manage_binding_keyboard())

# --- Compatibility wrappers for removed/renamed handlers ---
async def resend_code_removed(callback: types.CallbackQuery, state: FSMContext):
    return await resend_code(callback, state)

async def manage_accounts_removed(callback: types.CallbackQuery):
    # Redirect old callback to the new accounts menu
    return await manage_accounts_menu(callback)

async def unlink_account_removed(callback: types.CallbackQuery):
    # Keep supporting old callback prefix by delegating to the current handler
    return await unlink_account(callback)

async def admin_link_main_account_removed(callback: types.CallbackQuery, state: FSMContext):
    # Delegate to the current link flow
    return await admin_link_main_account(callback, state)

# --- Added missing channel management handlers ---
async def manage_channels_menu(callback: types.CallbackQuery):
    """Show accounts to pick for channel management."""
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    accounts: list[tuple[str]] = []
    async with aiosqlite.connect(db_path) as db:
        try:
            cursor = await db.execute("SELECT phone_number FROM linked_accounts")
            rows = await cursor.fetchall()
            accounts = [(r[0],) for r in rows]
        except Exception:
            accounts = []
    await callback.message.edit_text(
        "üì° –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏:",
        reply_markup=get_accounts_for_channels_keyboard(accounts)
    )

async def manage_channels_for_account(callback: types.CallbackQuery):
    """Render channel actions for a chosen account."""
    phone = callback.data.replace("manage_channels_for_", "")
    await callback.message.edit_text(
        f"üì° –ê–∫–∫–∞—É–Ω—Ç {phone}: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏",
        reply_markup=get_manage_channels_for_account_keyboard(phone)
    )

# Fallback to ensure name exists at runtime
if 'manage_accounts_menu' not in globals():
    async def manage_accounts_menu(callback: types.CallbackQuery):
        await callback.message.edit_text("üë• –£–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:", reply_markup=get_accounts_menu_keyboard())

async def accounts_list(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    db_path = await get_user_db_path(user_id, username)
    accounts = []
    async with aiosqlite.connect(db_path) as db:
        try:
            cursor = await db.execute("SELECT phone_number FROM linked_accounts")
            rows = await cursor.fetchall()
            accounts = [(r[0],) for r in rows]
        except Exception:
            accounts = []
    await callback.message.edit_text("üìã –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:", reply_markup=get_accounts_list_keyboard(accounts))

async def donor_count_one(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(allow_multiple_donors=False)
    await callback.message.edit_text("üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞:", reply_markup=get_donor_type_keyboard())

async def donor_count_many(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(allow_multiple_donors=True)
    await callback.message.edit_text("üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞:", reply_markup=get_donor_type_keyboard())

async def periodic_count_one(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(periodic_allow_multiple=False)
    await callback.message.edit_text("üîÅ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤:", reply_markup=get_periodic_source_keyboard())

async def periodic_count_many(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(periodic_allow_multiple=True)
    await callback.message.edit_text("üîÅ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤:", reply_markup=get_periodic_source_keyboard())
